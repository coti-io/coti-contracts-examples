/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BitwiseTestsContract,
  BitwiseTestsContractInterface,
} from "../../../contracts/precompiles/BitwiseTestsContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "andTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint16",
            name: "res16_16",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "res8_16",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "res16_8",
            type: "uint256",
          },
        ],
        internalType: "struct BitwiseTestsContract.Check16",
        name: "check16",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint32",
            name: "res32_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res8_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res32_8",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res16_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res32_16",
            type: "uint256",
          },
        ],
        internalType: "struct BitwiseTestsContract.Check32",
        name: "check32",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults32",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint64",
            name: "res64_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res8_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_8",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res16_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_16",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res32_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_32",
            type: "uint256",
          },
        ],
        internalType: "struct BitwiseTestsContract.Check64",
        name: "check64",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults64",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getResult",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "orTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint8",
            name: "a8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint8",
            name: "b8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "a16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "b16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "a32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "b32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "a64_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "b64_s",
            type: "uint256",
          },
        ],
        internalType: "struct BitwiseTestsContract.AllGTCastingValues",
        name: "castingValues",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "setPublicValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "xorTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50612701806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063acb381691161005b578063acb381691461011c578063de29278914610144578063ebb571fd1461014f578063f3367ccb1461016457600080fd5b80631e9773211461008d5780632e544aa0146100b757806380f937bc146100dd578063991e653214610109575b600080fd5b6100a061009b366004612414565b610177565b60405160ff90911681526020015b60405180910390f35b6100ca6100c536600461247f565b610822565b60405161ffff90911681526020016100ae565b6100f06100eb3660046124e9565b6108f1565b60405167ffffffffffffffff90911681526020016100ae565b6100a0610117366004612414565b610a7d565b61012f61012a36600461257b565b6110e8565b60405163ffffffff90911681526020016100ae565b60005460ff166100a0565b61016261015d3660046125f9565b6111fe565b005b6100a0610172366004612414565b611285565b60006101c160405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6101e560405180606001604052806000815260200160008152602001600081525090565b6102176040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6102576040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6102628488886111fe565b61027c610277856000015186602001516118f0565b611986565b6000806101000a81548160ff021916908360ff1602179055506102a784604001518560600151611a23565b8352835160608501516102ba9190611a38565b8360200181815250506102d584604001518560200151611a4e565b604084015260006102e584610822565b60005490915060ff1661ffff8216146103455760405162461bcd60e51b815260206004820152601660248201527f6f72546573743a2063617374203136206661696c65640000000000000000000060448201526064015b60405180910390fd5b61035785608001518660a00151611a64565b8352845160a086015161036a9190611a79565b83602001818152505061038585608001518660200151611a8f565b8360400181815250506103a085604001518660a00151611aa5565b8360600181815250506103bb85608001518660600151611abb565b608084015260006103cb846110e8565b60005490915060ff1663ffffffff8216146104285760405162461bcd60e51b815260206004820152601660248201527f6f72546573743a2063617374203332206661696c656400000000000000000000604482015260640161033c565b61043a8660c001518760e00151611ad1565b8352855160e087015161044d9190611ae6565b8360200181815250506104688660c001518760200151611afc565b83604001818152505061048386604001518760e00151611b12565b83606001818152505061049e8660c001518760600151611b28565b8360800181815250506104b986608001518760e00151611b3e565b8360a00181815250506104d48660c001518760a00151611b54565b60c084015260006104e4846108f1565b60005490915060ff1667ffffffffffffffff8216146105455760405162461bcd60e51b815260206004820152601660248201527f6f72546573743a2063617374203634206661696c656400000000000000000000604482015260640161033c565b6105566102778b8960200151611b6a565b60005460ff9081169116148015610585575061057961027788600001518b611bbc565b60005460ff9081169116145b6105f75760405162461bcd60e51b815260206004820152602660248201527f6f72546573743a2074657374203820626974732077697468207363616c61722060448201527f6661696c65640000000000000000000000000000000000000000000000000000606482015260840161033c565b61061061060b8b60ff168960600151611c0f565b611c63565b60005460ff1661ffff91909116148015610648575061063961060b88604001518b60ff16611c73565b60005460ff1661ffff91909116145b6106a45760405162461bcd60e51b815260206004820152602760248201527f6f72546573743a207465737420313620626974732077697468207363616c61726044820152660819985a5b195960ca1b606482015260840161033c565b6106bd6106b88b60ff168960a00151611cc6565b611d1c565b60005460ff1663ffffffff919091161480156106f957506106e86106b888608001518b60ff16611d2c565b60005460ff1663ffffffff91909116145b6107555760405162461bcd60e51b815260206004820152602760248201527f6f72546573743a207465737420333220626974732077697468207363616c61726044820152660819985a5b195960ca1b606482015260840161033c565b61076e6107698b60ff168960e00151611d82565b611ddc565b60005460ff1667ffffffffffffffff919091161480156107b2575061079d6107698860c001518b60ff16611dec565b60005460ff1667ffffffffffffffff91909116145b61080e5760405162461bcd60e51b815260206004820152602760248201527f6f72546573743a207465737420363420626974732077697468207363616c61726044820152660819985a5b195960ca1b606482015260840161033c565b505060005460ff1698975050505050505050565b6000806108328360000151611c63565b90506108418360200151611c63565b61ffff168161ffff1614801561086a575061085f8360400151611c63565b61ffff168161ffff16145b6108eb5760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a40161033c565b92915050565b6000806109018360000151611ddc565b90506109108360200151611ddc565b67ffffffffffffffff168167ffffffffffffffff16148015610951575061093a8360400151611ddc565b67ffffffffffffffff168167ffffffffffffffff16145b801561097c57506109658360800151611ddc565b67ffffffffffffffff168167ffffffffffffffff16145b80156109a757506109908360600151611ddc565b67ffffffffffffffff168167ffffffffffffffff16145b80156109d257506109bb8360c00151611ddc565b67ffffffffffffffff168167ffffffffffffffff16145b801561086a57506109e68360a00151611ddc565b67ffffffffffffffff168167ffffffffffffffff16146108eb5760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a40161033c565b6000610ac760405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610aeb60405180606001604052806000815260200160008152602001600081525090565b610b1d6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b610b5d6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610b688488886111fe565b610b7d61027785600001518660200151611e46565b6000806101000a81548160ff021916908360ff160217905550610ba884604001518560600151611e5b565b835283516060850151610bbb9190611e70565b836020018181525050610bd684604001518560200151611e86565b60408401526000610be684610822565b60005490915060ff1661ffff821614610c415760405162461bcd60e51b815260206004820152601760248201527f786f72546573743a2063617374203136206661696c6564000000000000000000604482015260640161033c565b610c5385608001518660a00151611e9c565b8352845160a0860151610c669190611eb1565b836020018181525050610c8185608001518660200151611ec7565b836040018181525050610c9c85604001518660a00151611edd565b836060018181525050610cb785608001518660600151611ef3565b60808401526000610cc7846110e8565b60005490915060ff1663ffffffff821614610d245760405162461bcd60e51b815260206004820152601760248201527f786f72546573743a2063617374203332206661696c6564000000000000000000604482015260640161033c565b610d368660c001518760e00151611f09565b8352855160e0870151610d499190611f1e565b836020018181525050610d648660c001518760200151611f34565b836040018181525050610d7f86604001518760e00151611f4a565b836060018181525050610d9a8660c001518760600151611f60565b836080018181525050610db586608001518760e00151611f76565b8360a0018181525050610dd08660c001518760a00151611f8c565b60c08401526000610de0846108f1565b60005490915060ff1667ffffffffffffffff821614610e415760405162461bcd60e51b815260206004820152601760248201527f786f72546573743a2063617374203634206661696c6564000000000000000000604482015260640161033c565b610e526102778b8960200151611fa2565b60005460ff9081169116148015610e815750610e7561027788600001518b611fb7565b60005460ff9081169116145b610edd5760405162461bcd60e51b815260206004820152602760248201527f786f72546573743a2074657374203820626974732077697468207363616c61726044820152660819985a5b195960ca1b606482015260840161033c565b610ef161060b8b60ff168960600151611fcd565b60005460ff1661ffff91909116148015610f295750610f1a61060b88604001518b60ff16611fe3565b60005460ff1661ffff91909116145b610f865760405162461bcd60e51b815260206004820152602860248201527f786f72546573743a207465737420313620626974732077697468207363616c616044820152671c8819985a5b195960c21b606482015260840161033c565b610f9a6106b88b60ff168960a00151611ff8565b60005460ff1663ffffffff91909116148015610fd65750610fc56106b888608001518b60ff1661200e565b60005460ff1663ffffffff91909116145b6110335760405162461bcd60e51b815260206004820152602860248201527f786f72546573743a207465737420333220626974732077697468207363616c616044820152671c8819985a5b195960c21b606482015260840161033c565b6110476107698b60ff168960e00151612024565b60005460ff1667ffffffffffffffff9190911614801561108b57506110766107698860c001518b60ff1661203a565b60005460ff1667ffffffffffffffff91909116145b61080e5760405162461bcd60e51b815260206004820152602860248201527f786f72546573743a207465737420363420626974732077697468207363616c616044820152671c8819985a5b195960c21b606482015260840161033c565b6000806110f88360000151611d1c565b90506111078360200151611d1c565b63ffffffff168163ffffffff1614801561113857506111298360400151611d1c565b63ffffffff168163ffffffff16145b801561115b575061114c8360800151611d1c565b63ffffffff168163ffffffff16145b801561086a575061116f8360600151611d1c565b63ffffffff168163ffffffff16146108eb5760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a40161033c565b61120782612050565b835261121281612050565b602084015261122360ff83166120a0565b604084015261123460ff82166120a0565b606084015261124560ff83166120f1565b608084015261125660ff82166120f1565b60a084015261126760ff8316612144565b60c084015261127860ff8216612144565b60e0909301929092525050565b60006112cf60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6112f360405180606001604052806000815260200160008152602001600081525090565b6113256040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6113656040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6113708488886111fe565b6113856102778560000151866020015161219b565b6000806101000a81548160ff021916908360ff1602179055506113b0846040015185606001516121b0565b8352835160608501516113c391906121c5565b8360200181815250506113de846040015185602001516121db565b604084015260006113ee84610822565b60005490915060ff1661ffff8216146114495760405162461bcd60e51b815260206004820152601760248201527f616e64546573743a2063617374203136206661696c6564000000000000000000604482015260640161033c565b61145b85608001518660a001516121f1565b8352845160a086015161146e9190612206565b8360200181815250506114898560800151866020015161221c565b8360400181815250506114a485604001518660a00151612232565b8360600181815250506114bf85608001518660600151612248565b608084015260006114cf846110e8565b60005490915060ff1663ffffffff82161461152c5760405162461bcd60e51b815260206004820152601760248201527f616e64546573743a2063617374203332206661696c6564000000000000000000604482015260640161033c565b61153e8660c001518760e0015161225e565b8352855160e08701516115519190612273565b83602001818152505061156c8660c001518760200151612289565b83604001818152505061158786604001518760e0015161229f565b8360600181815250506115a28660c0015187606001516122b5565b8360800181815250506115bd86608001518760e001516122cb565b8360a00181815250506115d88660c001518760a001516122e1565b60c084015260006115e8846108f1565b60005490915060ff1667ffffffffffffffff8216146116495760405162461bcd60e51b815260206004820152601760248201527f616e64546573743a2063617374203634206661696c6564000000000000000000604482015260640161033c565b61165a6102778b89602001516122f7565b60005460ff9081169116148015611689575061167d61027788600001518b61230c565b60005460ff9081169116145b6116e55760405162461bcd60e51b815260206004820152602760248201527f616e64546573743a2074657374203820626974732077697468207363616c61726044820152660819985a5b195960ca1b606482015260840161033c565b6116f961060b8b60ff168960600151612322565b60005460ff1661ffff91909116148015611731575061172261060b88604001518b60ff16612338565b60005460ff1661ffff91909116145b61178e5760405162461bcd60e51b815260206004820152602860248201527f616e64546573743a207465737420313620626974732077697468207363616c616044820152671c8819985a5b195960c21b606482015260840161033c565b6117a26106b88b60ff168960a0015161234d565b60005460ff1663ffffffff919091161480156117de57506117cd6106b888608001518b60ff16612363565b60005460ff1663ffffffff91909116145b61183b5760405162461bcd60e51b815260206004820152602860248201527f616e64546573743a207465737420333220626974732077697468207363616c616044820152671c8819985a5b195960c21b606482015260840161033c565b61184f6107698b60ff168960e00151612379565b60005460ff1667ffffffffffffffff91909116148015611893575061187e6107698860c001518b60ff1661238f565b60005460ff1667ffffffffffffffff91909116145b61080e5760405162461bcd60e51b815260206004820152602860248201527f616e64546573743a207465737420363420626974732077697468207363616c616044820152671c8819985a5b195960c21b606482015260840161033c565b6000606463fb7da35f611905600180856123a1565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015260248101869052604481018590526064015b6020604051808303816000875af115801561195b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197f919061269c565b9392505050565b60006064630cfed56160015b60f81b846040518363ffffffff1660e01b81526004016119e09291907fff00000000000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b6020604051808303816000875af11580156119ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108eb919061269c565b6000606463fb7da35f611905600280856123a1565b6000606463fb7da35f61190560016002856123a1565b6000606463fb7da35f61190560026001856123a1565b6000606463fb7da35f611905600380856123a1565b6000606463fb7da35f61190560016003856123a1565b6000606463fb7da35f61190560036001856123a1565b6000606463fb7da35f61190560026003856123a1565b6000606463fb7da35f61190560036002856123a1565b6000606463fb7da35f611905600480856123a1565b6000606463fb7da35f61190560016004856123a1565b6000606463fb7da35f61190560046001856123a1565b6000606463fb7da35f61190560026004856123a1565b6000606463fb7da35f61190560046002856123a1565b6000606463fb7da35f61190560036004856123a1565b6000606463fb7da35f61190560046003856123a1565b6000606463fb7da35f611b7f600180806123a1565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015260ff861660248201526044810185905260640161193c565b6000606463fb7da35f611bd260018060026123a1565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905260ff8516604482015260640161193c565b6000606463fb7da35f611c2560028060016123a1565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015261ffff861660248201526044810185905260640161193c565b60006064630cfed5616002611992565b6000606463fb7da35f611c88600280806123a1565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905261ffff8516604482015260640161193c565b6000606463fb7da35f611cdc60038060016123a1565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015263ffffffff861660248201526044810185905260640161193c565b60006064630cfed5616003611992565b6000606463fb7da35f611d4260038060026123a1565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905263ffffffff8516604482015260640161193c565b6000606463fb7da35f611d9860048060016123a1565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015267ffffffffffffffff861660248201526044810185905260640161193c565b60006064630cfed5616004611992565b6000606463fb7da35f611e0260048060026123a1565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905267ffffffffffffffff8516604482015260640161193c565b60006064636f962e2c611905600180856123a1565b60006064636f962e2c611905600280856123a1565b60006064636f962e2c61190560016002856123a1565b60006064636f962e2c61190560026001856123a1565b60006064636f962e2c611905600380856123a1565b60006064636f962e2c61190560016003856123a1565b60006064636f962e2c61190560036001856123a1565b60006064636f962e2c61190560026003856123a1565b60006064636f962e2c61190560036002856123a1565b60006064636f962e2c611905600480856123a1565b60006064636f962e2c61190560016004856123a1565b60006064636f962e2c61190560046001856123a1565b60006064636f962e2c61190560026004856123a1565b60006064636f962e2c61190560046002856123a1565b60006064636f962e2c61190560036004856123a1565b60006064636f962e2c61190560046003856123a1565b60006064636f962e2c611b7f600180806123a1565b60006064636f962e2c611bd260018060026123a1565b60006064636f962e2c611c2560028060016123a1565b60006064636f962e2c611c88600280806123a1565b60006064636f962e2c611cdc60038060016123a1565b60006064636f962e2c611d4260038060026123a1565b60006064636f962e2c611d9860048060016123a1565b60006064636f962e2c611e0260048060026123a1565b6040516306cdb05b60e51b81527f0100000000000000000000000000000000000000000000000000000000000000600482015260ff8216602482015260009060649063d9b60b60906044016119e0565b6040516306cdb05b60e51b81527f0200000000000000000000000000000000000000000000000000000000000000600482015261ffff8216602482015260009060649063d9b60b60906044016119e0565b6040516306cdb05b60e51b81527f0300000000000000000000000000000000000000000000000000000000000000600482015263ffffffff8216602482015260009060649063d9b60b60906044016119e0565b6040516306cdb05b60e51b81527f0400000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff8216602482015260009060649063d9b60b60906044016119e0565b6000606463fe9c73d1611905600180856123a1565b6000606463fe9c73d1611905600280856123a1565b6000606463fe9c73d161190560016002856123a1565b6000606463fe9c73d161190560026001856123a1565b6000606463fe9c73d1611905600380856123a1565b6000606463fe9c73d161190560016003856123a1565b6000606463fe9c73d161190560036001856123a1565b6000606463fe9c73d161190560026003856123a1565b6000606463fe9c73d161190560036002856123a1565b6000606463fe9c73d1611905600480856123a1565b6000606463fe9c73d161190560016004856123a1565b6000606463fe9c73d161190560046001856123a1565b6000606463fe9c73d161190560026004856123a1565b6000606463fe9c73d161190560046002856123a1565b6000606463fe9c73d161190560036004856123a1565b6000606463fe9c73d161190560046003856123a1565b6000606463fe9c73d1611b7f600180806123a1565b6000606463fe9c73d1611bd260018060026123a1565b6000606463fe9c73d1611c2560028060016123a1565b6000606463fe9c73d1611c88600280806123a1565b6000606463fe9c73d1611cdc60038060016123a1565b6000606463fe9c73d1611d4260038060026123a1565b6000606463fe9c73d1611d9860048060016123a1565b6000606463fe9c73d1611e0260048060025b60008160028111156123b5576123b56126b5565b60ff1660088460048111156123cc576123cc6126b5565b61ffff16901b61ffff1660108660048111156123ea576123ea6126b5565b62ffffff16901b171760e81b949350505050565b803560ff8116811461240f57600080fd5b919050565b6000806040838503121561242757600080fd5b612430836123fe565b915061243e602084016123fe565b90509250929050565b604051610100810167ffffffffffffffff8111828210171561247957634e487b7160e01b600052604160045260246000fd5b60405290565b60006060828403121561249157600080fd5b6040516060810181811067ffffffffffffffff821117156124c257634e487b7160e01b600052604160045260246000fd5b80604052508235815260208301356020820152604083013560408201528091505092915050565b600060e082840312156124fb57600080fd5b60405160e0810181811067ffffffffffffffff8211171561252c57634e487b7160e01b600052604160045260246000fd5b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528091505092915050565b600060a0828403121561258d57600080fd5b60405160a0810181811067ffffffffffffffff821117156125be57634e487b7160e01b600052604160045260246000fd5b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b600080600083850361014081121561261057600080fd5b6101008082121561262057600080fd5b612628612447565b9150853582526020860135602083015260408601356040830152606086013560608301526080860135608083015260a086013560a083015260c086013560c083015260e086013560e08301528194506126828187016123fe565b9350505061269361012085016123fe565b90509250925092565b6000602082840312156126ae57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220ae59a249efd0e9727e7af6ff9b82cf40e06885a63c8439fd0e0d57dccb71d4b864736f6c63430008140033";

type BitwiseTestsContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BitwiseTestsContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BitwiseTestsContract__factory extends ContractFactory {
  constructor(...args: BitwiseTestsContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BitwiseTestsContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): BitwiseTestsContract__factory {
    return super.connect(runner) as BitwiseTestsContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BitwiseTestsContractInterface {
    return new Interface(_abi) as BitwiseTestsContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BitwiseTestsContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as BitwiseTestsContract;
  }
}
