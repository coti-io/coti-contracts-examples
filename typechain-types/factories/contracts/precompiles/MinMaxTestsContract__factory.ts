/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MinMaxTestsContract,
  MinMaxTestsContractInterface,
} from "../../../contracts/precompiles/MinMaxTestsContract";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint16",
            name: "res16_16",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "res8_16",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "res16_8",
            type: "uint256",
          },
        ],
        internalType: "struct MinMaxTestsContract.Check16",
        name: "check16",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint32",
            name: "res32_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res8_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res32_8",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res16_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res32_16",
            type: "uint256",
          },
        ],
        internalType: "struct MinMaxTestsContract.Check32",
        name: "check32",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults32",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint64",
            name: "res64_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res8_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_8",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res16_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_16",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res32_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_32",
            type: "uint256",
          },
        ],
        internalType: "struct MinMaxTestsContract.Check64",
        name: "check64",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults64",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getResult",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "maxTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "minTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint8",
            name: "a8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint8",
            name: "b8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "a16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "b16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "a32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "b32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "a64_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "b64_s",
            type: "uint256",
          },
        ],
        internalType: "struct MinMaxTestsContract.AllGTCastingValues",
        name: "castingValues",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "setPublicValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611e07806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063dad85e0a1161005b578063dad85e0a14610101578063de29278914610126578063e23a217614610131578063ebb571fd1461014457600080fd5b80632e544aa01461008257806380f937bc146100ad578063acb38169146100d9575b600080fd5b610095610090366004611b3c565b610159565b60405161ffff90911681526020015b60405180910390f35b6100c06100bb366004611ba6565b61022d565b60405167ffffffffffffffff90911681526020016100a4565b6100ec6100e7366004611c38565b6103b9565b60405163ffffffff90911681526020016100a4565b61011461010f366004611ccc565b6104cf565b60405160ff90911681526020016100a4565b60005460ff16610114565b61011461013f366004611ccc565b610b70565b610157610152366004611cff565b611175565b005b60008061016983600001516111fc565b905061017883602001516111fc565b61ffff168161ffff161480156101a1575061019683604001516111fc565b61ffff168161ffff16145b6102275760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a4015b60405180910390fd5b92915050565b60008061023d8360000151611299565b905061024c8360200151611299565b67ffffffffffffffff168167ffffffffffffffff1614801561028d57506102768360400151611299565b67ffffffffffffffff168167ffffffffffffffff16145b80156102b857506102a18360800151611299565b67ffffffffffffffff168167ffffffffffffffff16145b80156102e357506102cc8360600151611299565b67ffffffffffffffff168167ffffffffffffffff16145b801561030e57506102f78360c00151611299565b67ffffffffffffffff168167ffffffffffffffff16145b80156101a157506103228360a00151611299565b67ffffffffffffffff168167ffffffffffffffff16146102275760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a40161021e565b6000806103c983600001516112a9565b90506103d883602001516112a9565b63ffffffff168163ffffffff1614801561040957506103fa83604001516112a9565b63ffffffff168163ffffffff16145b801561042c575061041d83608001516112a9565b63ffffffff168163ffffffff16145b80156101a1575061044083606001516112a9565b63ffffffff168163ffffffff16146102275760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a40161021e565b600061051960405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61053d60405180606001604052806000815260200160008152602001600081525090565b61056f6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6105af6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6105ba848888611175565b6105d46105cf856000015186602001516112b9565b61134f565b6000806101000a81548160ff021916908360ff1602179055506105ff8460400151856060015161135f565b8352835160608501516106129190611374565b83602001818152505061062d8460400151856020015161138a565b6040840152600061063d84610159565b60005490915060ff1661ffff8216146106985760405162461bcd60e51b815260206004820152601760248201527f6d696e546573743a2063617374203136206661696c6564000000000000000000604482015260640161021e565b6106aa85608001518660a001516113a0565b8352845160a08601516106bd91906113b5565b8360200181815250506106d8856080015186602001516113cb565b8360400181815250506106f385604001518660a001516113e1565b83606001818152505061070e856080015186606001516113f7565b6080840152600061071e846103b9565b60005490915060ff1663ffffffff82161461077b5760405162461bcd60e51b815260206004820152601760248201527f6d696e546573743a2063617374203332206661696c6564000000000000000000604482015260640161021e565b61078d8660c001518760e0015161140d565b8352855160e08701516107a09190611422565b8360200181815250506107bb8660c001518760200151611438565b8360400181815250506107d686604001518760e0015161144e565b8360600181815250506107f18660c001518760600151611464565b83608001818152505061080c86608001518760e0015161147a565b8360a00181815250506108278660c001518760a00151611490565b60c084015260006108378461022d565b60005490915060ff1667ffffffffffffffff8216146108985760405162461bcd60e51b815260206004820152601760248201527f6d696e546573743a2063617374203634206661696c6564000000000000000000604482015260640161021e565b6108a96105cf8b89602001516114a6565b60005460ff90811691161480156108d857506108cc6105cf88600001518b6114f8565b60005460ff9081169116145b61094a5760405162461bcd60e51b815260206004820152602760248201527f6d696e546573743a2074657374203820626974732077697468207363616c617260448201527f206661696c656400000000000000000000000000000000000000000000000000606482015260840161021e565b61096361095e8b60ff16896060015161154b565b6111fc565b61ffff168361ffff16148015610993575061098861095e88604001518b60ff1661159f565b61ffff168361ffff16145b6109f05760405162461bcd60e51b815260206004820152602860248201527f6d696e546573743a207465737420313620626974732077697468207363616c616044820152671c8819985a5b195960c21b606482015260840161021e565b610a09610a048b60ff168960a001516115f2565b6112a9565b63ffffffff168263ffffffff16148015610a415750610a32610a0488608001518b60ff16611648565b63ffffffff168263ffffffff16145b610a9e5760405162461bcd60e51b815260206004820152602860248201527f6d696e546573743a207465737420333220626974732077697468207363616c616044820152671c8819985a5b195960c21b606482015260840161021e565b610ab7610ab28b60ff168960e0015161169e565b611299565b67ffffffffffffffff168167ffffffffffffffff16148015610aff5750610ae8610ab28860c001518b60ff166116f8565b67ffffffffffffffff168167ffffffffffffffff16145b610b5c5760405162461bcd60e51b815260206004820152602860248201527f6d696e546573743a207465737420363420626974732077697468207363616c616044820152671c8819985a5b195960c21b606482015260840161021e565b505060005460ff1698975050505050505050565b6000610bba60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610bde60405180606001604052806000815260200160008152602001600081525090565b610c106040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b610c506040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610c5b848888611175565b610c706105cf85600001518660200151611752565b6000806101000a81548160ff021916908360ff160217905550610c9b84604001518560600151611767565b835283516060850151610cae919061177c565b836020018181525050610cc984604001518560200151611792565b60408401526000610cd984610159565b60005490915060ff1661ffff821614610d345760405162461bcd60e51b815260206004820152601760248201527f6d6178546573743a2063617374203136206661696c6564000000000000000000604482015260640161021e565b610d4685608001518660a001516117a8565b8352845160a0860151610d5991906117bd565b836020018181525050610d74856080015186602001516117d3565b836040018181525050610d8f85604001518660a001516117e9565b836060018181525050610daa856080015186606001516117ff565b60808401526000610dba846103b9565b60005490915060ff1663ffffffff821614610e175760405162461bcd60e51b815260206004820152601760248201527f6d6178546573743a2063617374203332206661696c6564000000000000000000604482015260640161021e565b610e298660c001518760e00151611815565b8352855160e0870151610e3c919061182a565b836020018181525050610e578660c001518760200151611840565b836040018181525050610e7286604001518760e00151611856565b836060018181525050610e8d8660c00151876060015161186c565b836080018181525050610ea886608001518760e00151611882565b8360a0018181525050610ec38660c001518760a00151611898565b60c08401526000610ed38461022d565b60005490915060ff1667ffffffffffffffff821614610f345760405162461bcd60e51b815260206004820152601760248201527f6d6178546573743a2063617374203634206661696c6564000000000000000000604482015260640161021e565b610f456105cf8b89602001516118ae565b60005460ff9081169116148015610f745750610f686105cf88600001518b6118c3565b60005460ff9081169116145b610fe65760405162461bcd60e51b815260206004820152602760248201527f6d696e546573743a2074657374203820626974732077697468207363616c617260448201527f206661696c656400000000000000000000000000000000000000000000000000606482015260840161021e565b610ffa61095e8b60ff1689606001516118d9565b61ffff168361ffff1614801561102a575061101f61095e88604001518b60ff166118ef565b61ffff168361ffff16145b6110875760405162461bcd60e51b815260206004820152602860248201527f6d696e546573743a207465737420313620626974732077697468207363616c616044820152671c8819985a5b195960c21b606482015260840161021e565b61109b610a048b60ff168960a00151611904565b63ffffffff168263ffffffff161480156110d357506110c4610a0488608001518b60ff1661191a565b63ffffffff168263ffffffff16145b6111305760405162461bcd60e51b815260206004820152602860248201527f6d696e546573743a207465737420333220626974732077697468207363616c616044820152671c8819985a5b195960c21b606482015260840161021e565b611144610ab28b60ff168960e00151611930565b67ffffffffffffffff168167ffffffffffffffff16148015610aff5750610ae8610ab28860c001518b60ff16611946565b61117e8261195c565b83526111898161195c565b602084015261119a60ff83166119ac565b60408401526111ab60ff82166119ac565b60608401526111bc60ff83166119fd565b60808401526111cd60ff82166119fd565b60a08401526111de60ff8316611a50565b60c08401526111ef60ff8216611a50565b60e0909301929092525050565b60006064630cfed56160025b60f81b846040518363ffffffff1660e01b81526004016112569291907fff00000000000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b6020604051808303816000875af1158015611275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102279190611db8565b60006064630cfed5616004611208565b60006064630cfed5616003611208565b600060646369ca08746112ce60018085611aa7565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015260248101869052604481018590526064015b6020604051808303816000875af1158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190611db8565b9392505050565b60006064630cfed5616001611208565b600060646369ca08746112ce60028085611aa7565b600060646369ca08746112ce6001600285611aa7565b600060646369ca08746112ce6002600185611aa7565b600060646369ca08746112ce60038085611aa7565b600060646369ca08746112ce6001600385611aa7565b600060646369ca08746112ce6003600185611aa7565b600060646369ca08746112ce6002600385611aa7565b600060646369ca08746112ce6003600285611aa7565b600060646369ca08746112ce60048085611aa7565b600060646369ca08746112ce6001600485611aa7565b600060646369ca08746112ce6004600185611aa7565b600060646369ca08746112ce6002600485611aa7565b600060646369ca08746112ce6004600285611aa7565b600060646369ca08746112ce6003600485611aa7565b600060646369ca08746112ce6004600385611aa7565b600060646369ca08746114bb60018080611aa7565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015260ff8616602482015260448101859052606401611305565b600060646369ca087461150e6001806002611aa7565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905260ff85166044820152606401611305565b600060646369ca08746115616002806001611aa7565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015261ffff8616602482015260448101859052606401611305565b600060646369ca08746115b460028080611aa7565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905261ffff85166044820152606401611305565b600060646369ca08746116086003806001611aa7565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015263ffffffff8616602482015260448101859052606401611305565b600060646369ca087461165e6003806002611aa7565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905263ffffffff85166044820152606401611305565b600060646369ca08746116b46004806001611aa7565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015267ffffffffffffffff8616602482015260448101859052606401611305565b600060646369ca087461170e6004806002611aa7565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905267ffffffffffffffff85166044820152606401611305565b60006064639bda07826112ce60018085611aa7565b60006064639bda07826112ce60028085611aa7565b60006064639bda07826112ce6001600285611aa7565b60006064639bda07826112ce6002600185611aa7565b60006064639bda07826112ce60038085611aa7565b60006064639bda07826112ce6001600385611aa7565b60006064639bda07826112ce6003600185611aa7565b60006064639bda07826112ce6002600385611aa7565b60006064639bda07826112ce6003600285611aa7565b60006064639bda07826112ce60048085611aa7565b60006064639bda07826112ce6001600485611aa7565b60006064639bda07826112ce6004600185611aa7565b60006064639bda07826112ce6002600485611aa7565b60006064639bda07826112ce6004600285611aa7565b60006064639bda07826112ce6003600485611aa7565b60006064639bda07826112ce6004600385611aa7565b60006064639bda07826114bb60018080611aa7565b60006064639bda078261150e6001806002611aa7565b60006064639bda07826115616002806001611aa7565b60006064639bda07826115b460028080611aa7565b60006064639bda07826116086003806001611aa7565b60006064639bda078261165e6003806002611aa7565b60006064639bda07826116b46004806001611aa7565b60006064639bda078261170e6004806002611aa7565b6040516306cdb05b60e51b81527f0100000000000000000000000000000000000000000000000000000000000000600482015260ff8216602482015260009060649063d9b60b6090604401611256565b6040516306cdb05b60e51b81527f0200000000000000000000000000000000000000000000000000000000000000600482015261ffff8216602482015260009060649063d9b60b6090604401611256565b6040516306cdb05b60e51b81527f0300000000000000000000000000000000000000000000000000000000000000600482015263ffffffff8216602482015260009060649063d9b60b6090604401611256565b6040516306cdb05b60e51b81527f0400000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff8216602482015260009060649063d9b60b6090604401611256565b6000816002811115611abb57611abb611da2565b60ff166008846004811115611ad257611ad2611da2565b61ffff16901b61ffff166010866004811115611af057611af0611da2565b62ffffff16901b171760e81b949350505050565b604051610100810167ffffffffffffffff81118282101715611b3657634e487b7160e01b600052604160045260246000fd5b60405290565b600060608284031215611b4e57600080fd5b6040516060810181811067ffffffffffffffff82111715611b7f57634e487b7160e01b600052604160045260246000fd5b80604052508235815260208301356020820152604083013560408201528091505092915050565b600060e08284031215611bb857600080fd5b60405160e0810181811067ffffffffffffffff82111715611be957634e487b7160e01b600052604160045260246000fd5b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528091505092915050565b600060a08284031215611c4a57600080fd5b60405160a0810181811067ffffffffffffffff82111715611c7b57634e487b7160e01b600052604160045260246000fd5b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b803560ff81168114611cc757600080fd5b919050565b60008060408385031215611cdf57600080fd5b611ce883611cb6565b9150611cf660208401611cb6565b90509250929050565b6000806000838503610140811215611d1657600080fd5b61010080821215611d2657600080fd5b611d2e611b04565b9150853582526020860135602083015260408601356040830152606086013560608301526080860135608083015260a086013560a083015260c086013560c083015260e086013560e0830152819450611d88818701611cb6565b93505050611d996101208501611cb6565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b600060208284031215611dca57600080fd5b505191905056fea26469706673582212201eae3c4181c8942ed116e538f3cdadb8bc44839d980c372c26d5841bbe0f644264736f6c63430008140033";

type MinMaxTestsContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MinMaxTestsContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MinMaxTestsContract__factory extends ContractFactory {
  constructor(...args: MinMaxTestsContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MinMaxTestsContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MinMaxTestsContract__factory {
    return super.connect(runner) as MinMaxTestsContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinMaxTestsContractInterface {
    return new Interface(_abi) as MinMaxTestsContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MinMaxTestsContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MinMaxTestsContract;
  }
}
