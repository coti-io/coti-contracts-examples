/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ArithmeticTestsContract,
  ArithmeticTestsContractInterface,
} from "../../../contracts/precompiles/ArithmeticTestsContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "addTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint16",
            name: "res16_16",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "res8_16",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "res16_8",
            type: "uint256",
          },
        ],
        internalType: "struct ArithmeticTestsContract.Check16",
        name: "check16",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint32",
            name: "res32_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res8_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res32_8",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res16_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res32_16",
            type: "uint256",
          },
        ],
        internalType: "struct ArithmeticTestsContract.Check32",
        name: "check32",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults32",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint64",
            name: "res64_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res8_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_8",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res16_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_16",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res32_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_32",
            type: "uint256",
          },
        ],
        internalType: "struct ArithmeticTestsContract.Check64",
        name: "check64",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults64",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getResult",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getResult16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "mulTest",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint8",
            name: "a8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint8",
            name: "b8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "a16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "b16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "a32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "b32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "a64_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "b64_s",
            type: "uint256",
          },
        ],
        internalType: "struct ArithmeticTestsContract.AllGTCastingValues",
        name: "castingValues",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "setPublicValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "subTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506128b2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80637bfd430011610076578063acb381691161005b578063acb381691461015b578063de29278914610183578063ebb571fd1461018e57600080fd5b80637bfd43001461011e57806380f937bc1461012f57600080fd5b8063202cdc8f146100a85780632e544aa0146100d35780634f5941bc146100e65780635e60e5c01461010b575b600080fd5b6100bb6100b63660046125c5565b6101a3565b60405161ffff90911681526020015b60405180910390f35b6100bb6100e1366004612630565b6109b4565b6100f96100f43660046125c5565b610a83565b60405160ff90911681526020016100ca565b6100f96101193660046125c5565b611107565b600054610100900461ffff166100bb565b61014261013d36600461269a565b611772565b60405167ffffffffffffffff90911681526020016100ca565b61016e61016936600461272c565b6118fe565b60405163ffffffff90911681526020016100ca565b60005460ff166100f9565b6101a161019c3660046127aa565b611a14565b005b60006101ed60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61021160405180606001604052806000815260200160008152602001600081525090565b6102436040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6102836040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61028e848888611a14565b6102a86102a385600001518660200151611a9b565b611b31565b600060016101000a81548161ffff021916908361ffff1602179055506102d684604001518560600151611bce565b8352835160608501516102e99190611be3565b83602001818152505061030484604001518560200151611bf9565b6040840152825161031490611c0f565b60005461ffff6101009091041663ffffffff91909116148015610357575061033f8360200151611c0f565b60005461ffff6101009091041663ffffffff91909116145b8015610383575061036b8360400151611c0f565b60005461ffff6101009091041663ffffffff91909116145b6103d45760405162461bcd60e51b815260206004820152601760248201527f6d756c546573743a2063617374203136206661696c656400000000000000000060448201526064015b60405180910390fd5b6103e684608001518560a00151611c1f565b8252835160a08501516103f99190611c34565b82602001818152505061041484608001518560200151611c4a565b82604001818152505061042f84604001518560a00151611c60565b82606001818152505061044a84608001518560600151611c76565b6080830152815161045a90611c8c565b60005461ffff6101009091041667ffffffffffffffff919091161480156104a557506104898260200151611c8c565b60005461ffff6101009091041667ffffffffffffffff91909116145b80156104d557506104b98260400151611c8c565b60005461ffff6101009091041667ffffffffffffffff91909116145b801561050557506104e98260800151611c8c565b60005461ffff6101009091041667ffffffffffffffff91909116145b801561053557506105198260600151611c8c565b60005461ffff6101009091041667ffffffffffffffff91909116145b6105815760405162461bcd60e51b815260206004820152601760248201527f6d756c546573743a2063617374203332206661696c656400000000000000000060448201526064016103cb565b6105938460c001518560e00151611c9c565b8152835160e08501516105a69190611cb1565b8160200181815250506105c18460c001518560200151611cc7565b8160400181815250506105dc84604001518560e00151611cdd565b8160600181815250506105f78460c001518560600151611cf3565b81608001818152505061061284608001518560e00151611d09565b8160a001818152505061062d8460c001518560a00151611d1f565b60c0820152600061063d82611772565b60005490915061ffff6101009091041667ffffffffffffffff8216146106a55760405162461bcd60e51b815260206004820152601760248201527f6d756c546573743a2063617374203634206661696c656400000000000000000060448201526064016103cb565b6106b66102a3898760200151611d35565b600054610100900461ffff90811691161480156106f157506106df6102a3866000015189611d87565b600054610100900461ffff9081169116145b61074d5760405162461bcd60e51b815260206004820152602760248201527f6d756c546573743a2074657374203820626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016103cb565b6107666107618960ff168760600151611dda565b611c8c565b60005461ffff6101009091041667ffffffffffffffff919091161480156107b957506107a161079c86604001518960ff16611e2e565b611c0f565b60005461ffff6101009091041663ffffffff91909116145b6108165760405162461bcd60e51b815260206004820152602860248201527f6d756c546573743a207465737420313620626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103cb565b61082a6107618960ff168760a00151611e82565b60005461ffff6101009091041667ffffffffffffffff9190911614801561087c575061086061076186608001518960ff16611ed8565b60005461ffff6101009091041667ffffffffffffffff91909116145b6108d95760405162461bcd60e51b815260206004820152602860248201527f6d756c546573743a207465737420333220626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103cb565b6108ed6107618960ff168760e00151611f2e565b60005461ffff6101009091041667ffffffffffffffff9190911614801561093f57506109236107618660c001518960ff16611f88565b60005461ffff6101009091041667ffffffffffffffff91909116145b61099c5760405162461bcd60e51b815260206004820152602860248201527f6d756c546573743a207465737420363420626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103cb565b5050600054610100900461ffff169695505050505050565b6000806109c48360000151611b31565b90506109d38360200151611b31565b61ffff168161ffff161480156109fc57506109f18360400151611b31565b61ffff168161ffff16145b610a7d5760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a4016103cb565b92915050565b6000610acd60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610af160405180606001604052806000815260200160008152602001600081525090565b610b236040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b610b636040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610b6e848888611a14565b610b88610b8385600001518660200151611fe2565b611ff7565b6000806101000a81548160ff021916908360ff160217905550610bb384604001518560600151612007565b835283516060850151610bc6919061201c565b836020018181525050610be184604001518560200151612032565b60408401526000610bf1846109b4565b60005490915060ff1661ffff821614610c4c5760405162461bcd60e51b815260206004820152601760248201527f737562546573743a2063617374203136206661696c656400000000000000000060448201526064016103cb565b610c5e85608001518660a00151612048565b8352845160a0860151610c71919061205d565b836020018181525050610c8c85608001518660200151612073565b836040018181525050610ca785604001518660a00151612089565b836060018181525050610cc28560800151866060015161209f565b60808401526000610cd2846118fe565b60005490915060ff1663ffffffff821614610d2f5760405162461bcd60e51b815260206004820152601760248201527f737562546573743a2063617374203332206661696c656400000000000000000060448201526064016103cb565b610d418660c001518760e001516120b5565b8352855160e0870151610d5491906120ca565b836020018181525050610d6f8660c0015187602001516120e0565b836040018181525050610d8a86604001518760e001516120f6565b836060018181525050610da58660c00151876060015161210c565b836080018181525050610dc086608001518760e00151612122565b8360a0018181525050610ddb8660c001518760a00151612138565b60c08401526000610deb84611772565b60005490915060ff1667ffffffffffffffff821614610e4c5760405162461bcd60e51b815260206004820152601760248201527f737562546573743a2063617374203634206661696c656400000000000000000060448201526064016103cb565b610e5d610b838b896020015161214e565b60005460ff9081169116148015610e8c5750610e80610b8388600001518b612163565b60005460ff9081169116145b610ee85760405162461bcd60e51b815260206004820152602760248201527f737562546573743a2074657374203820626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016103cb565b610efc6102a38b60ff168960600151612179565b60005460ff1661ffff91909116148015610f345750610f256102a388604001518b60ff1661218f565b60005460ff1661ffff91909116145b610f915760405162461bcd60e51b815260206004820152602860248201527f737562546573743a207465737420313620626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103cb565b610fa561079c8b60ff168960a001516121a5565b60005460ff1663ffffffff91909116148015610fe15750610fd061079c88608001518b60ff166121bb565b60005460ff1663ffffffff91909116145b61103e5760405162461bcd60e51b815260206004820152602860248201527f737562546573743a207465737420333220626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103cb565b6110526107618b60ff168960e001516121d1565b60005460ff1667ffffffffffffffff9190911614801561109657506110816107618860c001518b60ff166121e7565b60005460ff1667ffffffffffffffff91909116145b6110f35760405162461bcd60e51b815260206004820152602860248201527f737562546573743a207465737420363420626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103cb565b505060005460ff1698975050505050505050565b600061115160405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61117560405180606001604052806000815260200160008152602001600081525090565b6111a76040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6111e76040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6111f2848888611a14565b611207610b83856000015186602001516121fd565b6000806101000a81548160ff021916908360ff16021790555061123284604001518560600151612212565b8352835160608501516112459190612227565b8360200181815250506112608460400151856020015161223d565b60408401526000611270846109b4565b60005490915060ff1661ffff8216146112cb5760405162461bcd60e51b815260206004820152601760248201527f616464546573743a2063617374203136206661696c656400000000000000000060448201526064016103cb565b6112dd85608001518660a00151612253565b8352845160a08601516112f09190612268565b83602001818152505061130b8560800151866020015161227e565b83604001818152505061132685604001518660a00151612294565b836060018181525050611341856080015186606001516122aa565b60808401526000611351846118fe565b60005490915060ff1663ffffffff8216146113ae5760405162461bcd60e51b815260206004820152601760248201527f616464546573743a2063617374203332206661696c656400000000000000000060448201526064016103cb565b6113c08660c001518760e001516122c0565b8352855160e08701516113d391906122d5565b8360200181815250506113ee8660c0015187602001516122eb565b83604001818152505061140986604001518760e00151612301565b8360600181815250506114248660c001518760600151612317565b83608001818152505061143f86608001518760e0015161232d565b8360a001818152505061145a8660c001518760a00151612343565b60c0840152600061146a84611772565b60005490915060ff1667ffffffffffffffff8216146114cb5760405162461bcd60e51b815260206004820152601760248201527f616464546573743a2063617374203634206661696c656400000000000000000060448201526064016103cb565b6114dc610b838b8960200151612359565b60005460ff908116911614801561150b57506114ff610b8388600001518b61236e565b60005460ff9081169116145b6115675760405162461bcd60e51b815260206004820152602760248201527f616464546573743a2074657374203820626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016103cb565b61157b6102a38b60ff168960600151612384565b60005460ff1661ffff919091161480156115b357506115a46102a388604001518b60ff1661239a565b60005460ff1661ffff91909116145b6116105760405162461bcd60e51b815260206004820152602860248201527f616464546573743a207465737420313620626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103cb565b61162461079c8b60ff168960a001516123af565b60005460ff1663ffffffff91909116148015611660575061164f61079c88608001518b60ff166123c5565b60005460ff1663ffffffff91909116145b6116bd5760405162461bcd60e51b815260206004820152602860248201527f616464546573743a207465737420333220626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103cb565b6116d16107618b60ff168960e001516123db565b60005460ff1667ffffffffffffffff9190911614801561171557506117006107618860c001518b60ff166123f1565b60005460ff1667ffffffffffffffff91909116145b6110f35760405162461bcd60e51b815260206004820152602860248201527f616464546573743a207465737420363420626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103cb565b6000806117828360000151611c8c565b90506117918360200151611c8c565b67ffffffffffffffff168167ffffffffffffffff161480156117d257506117bb8360400151611c8c565b67ffffffffffffffff168167ffffffffffffffff16145b80156117fd57506117e68360800151611c8c565b67ffffffffffffffff168167ffffffffffffffff16145b801561182857506118118360600151611c8c565b67ffffffffffffffff168167ffffffffffffffff16145b8015611853575061183c8360c00151611c8c565b67ffffffffffffffff168167ffffffffffffffff16145b80156109fc57506118678360a00151611c8c565b67ffffffffffffffff168167ffffffffffffffff1614610a7d5760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a4016103cb565b60008061190e8360000151611c0f565b905061191d8360200151611c0f565b63ffffffff168163ffffffff1614801561194e575061193f8360400151611c0f565b63ffffffff168163ffffffff16145b801561197157506119628360800151611c0f565b63ffffffff168163ffffffff16145b80156109fc57506119858360600151611c0f565b63ffffffff168163ffffffff1614610a7d5760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a4016103cb565b611a1d82612407565b8352611a2881612407565b6020840152611a3960ff8316612457565b6040840152611a4a60ff8216612457565b6060840152611a5b60ff83166124a8565b6080840152611a6c60ff82166124a8565b60a0840152611a7d60ff83166124fb565b60c0840152611a8e60ff82166124fb565b60e0909301929092525050565b6000606463f1d21bb4611ab060018085612552565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015260248101869052604481018590526064015b6020604051808303816000875af1158015611b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2a919061284d565b9392505050565b60006064630cfed56160025b60f81b846040518363ffffffff1660e01b8152600401611b8b9291907fff00000000000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b6020604051808303816000875af1158015611baa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d919061284d565b6000606463f1d21bb4611ab060028085612552565b6000606463f1d21bb4611ab06001600285612552565b6000606463f1d21bb4611ab06002600185612552565b60006064630cfed5616003611b3d565b6000606463f1d21bb4611ab060038085612552565b6000606463f1d21bb4611ab06001600385612552565b6000606463f1d21bb4611ab06003600185612552565b6000606463f1d21bb4611ab06002600385612552565b6000606463f1d21bb4611ab06003600285612552565b60006064630cfed5616004611b3d565b6000606463f1d21bb4611ab060048085612552565b6000606463f1d21bb4611ab06001600485612552565b6000606463f1d21bb4611ab06004600185612552565b6000606463f1d21bb4611ab06002600485612552565b6000606463f1d21bb4611ab06004600285612552565b6000606463f1d21bb4611ab06003600485612552565b6000606463f1d21bb4611ab06004600385612552565b6000606463f1d21bb4611d4a60018080612552565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015260ff8616602482015260448101859052606401611ae7565b6000606463f1d21bb4611d9d6001806002612552565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905260ff85166044820152606401611ae7565b6000606463f1d21bb4611df06002806001612552565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015261ffff8616602482015260448101859052606401611ae7565b6000606463f1d21bb4611e446001806002612552565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905261ffff85166044820152606401611ae7565b6000606463f1d21bb4611e986003806001612552565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015263ffffffff8616602482015260448101859052606401611ae7565b6000606463f1d21bb4611eee6003806002612552565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905263ffffffff85166044820152606401611ae7565b6000606463f1d21bb4611f446004806001612552565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015267ffffffffffffffff8616602482015260448101859052606401611ae7565b6000606463f1d21bb4611f9e6004806002612552565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905267ffffffffffffffff85166044820152606401611ae7565b6000606463371d1bf2611ab060018085612552565b60006064630cfed5616001611b3d565b6000606463371d1bf2611ab060028085612552565b6000606463371d1bf2611ab06001600285612552565b6000606463371d1bf2611ab06002600185612552565b6000606463371d1bf2611ab060038085612552565b6000606463371d1bf2611ab06001600385612552565b6000606463371d1bf2611ab06003600185612552565b6000606463371d1bf2611ab06002600385612552565b6000606463371d1bf2611ab06003600285612552565b6000606463371d1bf2611ab060048085612552565b6000606463371d1bf2611ab06001600485612552565b6000606463371d1bf2611ab06004600185612552565b6000606463371d1bf2611ab06002600485612552565b6000606463371d1bf2611ab06004600285612552565b6000606463371d1bf2611ab06003600485612552565b6000606463371d1bf2611ab06004600385612552565b6000606463371d1bf2611d4a60018080612552565b6000606463371d1bf2611d9d6001806002612552565b6000606463371d1bf2611df06002806001612552565b6000606463371d1bf2611e446001806002612552565b6000606463371d1bf2611e986003806001612552565b6000606463371d1bf2611eee6003806002612552565b6000606463371d1bf2611f446004806001612552565b6000606463371d1bf2611f9e6004806002612552565b60006064638c5d0150611ab060018085612552565b60006064638c5d0150611ab060028085612552565b60006064638c5d0150611ab06001600285612552565b60006064638c5d0150611ab06002600185612552565b60006064638c5d0150611ab060038085612552565b60006064638c5d0150611ab06001600385612552565b60006064638c5d0150611ab06003600185612552565b60006064638c5d0150611ab06002600385612552565b60006064638c5d0150611ab06003600285612552565b60006064638c5d0150611ab060048085612552565b60006064638c5d0150611ab06001600485612552565b60006064638c5d0150611ab06004600185612552565b60006064638c5d0150611ab06002600485612552565b60006064638c5d0150611ab06004600285612552565b60006064638c5d0150611ab06003600485612552565b60006064638c5d0150611ab06004600385612552565b60006064638c5d0150611d4a60018080612552565b60006064638c5d0150611d9d6001806002612552565b60006064638c5d0150611df06002806001612552565b60006064638c5d0150611e4460028080612552565b60006064638c5d0150611e986003806001612552565b60006064638c5d0150611eee6003806002612552565b60006064638c5d0150611f446004806001612552565b60006064638c5d0150611f9e6004806002612552565b6040516306cdb05b60e51b81527f0100000000000000000000000000000000000000000000000000000000000000600482015260ff8216602482015260009060649063d9b60b6090604401611b8b565b6040516306cdb05b60e51b81527f0200000000000000000000000000000000000000000000000000000000000000600482015261ffff8216602482015260009060649063d9b60b6090604401611b8b565b6040516306cdb05b60e51b81527f0300000000000000000000000000000000000000000000000000000000000000600482015263ffffffff8216602482015260009060649063d9b60b6090604401611b8b565b6040516306cdb05b60e51b81527f0400000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff8216602482015260009060649063d9b60b6090604401611b8b565b600081600281111561256657612566612866565b60ff16600884600481111561257d5761257d612866565b61ffff16901b61ffff16601086600481111561259b5761259b612866565b62ffffff16901b171760e81b949350505050565b803560ff811681146125c057600080fd5b919050565b600080604083850312156125d857600080fd5b6125e1836125af565b91506125ef602084016125af565b90509250929050565b604051610100810167ffffffffffffffff8111828210171561262a57634e487b7160e01b600052604160045260246000fd5b60405290565b60006060828403121561264257600080fd5b6040516060810181811067ffffffffffffffff8211171561267357634e487b7160e01b600052604160045260246000fd5b80604052508235815260208301356020820152604083013560408201528091505092915050565b600060e082840312156126ac57600080fd5b60405160e0810181811067ffffffffffffffff821117156126dd57634e487b7160e01b600052604160045260246000fd5b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528091505092915050565b600060a0828403121561273e57600080fd5b60405160a0810181811067ffffffffffffffff8211171561276f57634e487b7160e01b600052604160045260246000fd5b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b60008060008385036101408112156127c157600080fd5b610100808212156127d157600080fd5b6127d96125f8565b9150853582526020860135602083015260408601356040830152606086013560608301526080860135608083015260a086013560a083015260c086013560c083015260e086013560e08301528194506128338187016125af565b9350505061284461012085016125af565b90509250925092565b60006020828403121561285f57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220360317bb97333692ea17287d137a0d6e4db77ef33ddbc099526f5930ec9422e264736f6c63430008140033";

type ArithmeticTestsContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArithmeticTestsContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArithmeticTestsContract__factory extends ContractFactory {
  constructor(...args: ArithmeticTestsContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ArithmeticTestsContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ArithmeticTestsContract__factory {
    return super.connect(runner) as ArithmeticTestsContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArithmeticTestsContractInterface {
    return new Interface(_abi) as ArithmeticTestsContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ArithmeticTestsContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ArithmeticTestsContract;
  }
}
