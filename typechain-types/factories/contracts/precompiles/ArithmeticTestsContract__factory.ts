/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ArithmeticTestsContract,
  ArithmeticTestsContractInterface,
} from "../../../contracts/precompiles/ArithmeticTestsContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "addTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint16",
            name: "res16_16",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "res8_16",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "res16_8",
            type: "uint256",
          },
        ],
        internalType: "struct ArithmeticTestsContract.Check16",
        name: "check16",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint32",
            name: "res32_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res8_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res32_8",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res16_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res32_16",
            type: "uint256",
          },
        ],
        internalType: "struct ArithmeticTestsContract.Check32",
        name: "check32",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults32",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint64",
            name: "res64_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res8_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_8",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res16_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_16",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res32_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_32",
            type: "uint256",
          },
        ],
        internalType: "struct ArithmeticTestsContract.Check64",
        name: "check64",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults64",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getResult",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getResult16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "mulTest",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint8",
            name: "a8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint8",
            name: "b8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "a16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "b16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "a32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "b32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "a64_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "b64_s",
            type: "uint256",
          },
        ],
        internalType: "struct ArithmeticTestsContract.AllGTCastingValues",
        name: "castingValues",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "setPublicValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "subTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061287c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80637bfd430011610076578063acb381691161005b578063acb381691461015b578063de29278914610183578063ebb571fd1461018e57600080fd5b80637bfd43001461011e57806380f937bc1461012f57600080fd5b8063202cdc8f146100a85780632e544aa0146100d35780634f5941bc146100e65780635e60e5c01461010b575b600080fd5b6100bb6100b636600461258f565b6101a3565b60405161ffff90911681526020015b60405180910390f35b6100bb6100e13660046125fa565b610984565b6100f96100f436600461258f565b610a53565b60405160ff90911681526020016100ca565b6100f961011936600461258f565b6110d2565b600054610100900461ffff166100bb565b61014261013d366004612664565b61173d565b60405167ffffffffffffffff90911681526020016100ca565b61016e6101693660046126f6565b6118c9565b60405163ffffffff90911681526020016100ca565b60005460ff166100f9565b6101a161019c366004612774565b6119df565b005b60006101ed60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61021160405180606001604052806000815260200160008152602001600081525090565b6102436040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6102836040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61028e8488886119df565b6102a86102a385600001518660200151611a66565b611afc565b60ff16600060016101000a81548161ffff021916908361ffff1602179055506102d984604001518560600151611b99565b8352835160608501516102ec9190611bae565b83602001818152505061030784604001518560200151611bc4565b6040840152825161031790611bda565b600054610100900461ffff908116911614801561034e575061033c8360200151611bda565b600054610100900461ffff9081169116145b801561037457506103628360400151611bda565b600054610100900461ffff9081169116145b6103c55760405162461bcd60e51b815260206004820152601760248201527f6d756c546573743a2063617374203136206661696c656400000000000000000060448201526064015b60405180910390fd5b6103d784608001518560a00151611bea565b8252835160a08501516103ea9190611bff565b82602001818152505061040584608001518560200151611c15565b82604001818152505061042084604001518560a00151611c2b565b82606001818152505061043b84608001518560600151611c41565b6080830152815161044b90611c57565b60005461ffff6101009091041663ffffffff9190911614801561048e57506104768260200151611c57565b60005461ffff6101009091041663ffffffff91909116145b80156104ba57506104a28260400151611c57565b60005461ffff6101009091041663ffffffff91909116145b80156104e657506104ce8260800151611c57565b60005461ffff6101009091041663ffffffff91909116145b801561051257506104fa8260600151611c57565b60005461ffff6101009091041663ffffffff91909116145b61055e5760405162461bcd60e51b815260206004820152601760248201527f6d756c546573743a2063617374203332206661696c656400000000000000000060448201526064016103bc565b6105708460c001518560e00151611c67565b8152835160e08501516105839190611c7c565b81602001818152505061059e8460c001518560200151611c92565b8160400181815250506105b984604001518560e00151611ca8565b8160600181815250506105d48460c001518560600151611cbe565b8160800181815250506105ef84608001518560e00151611cd4565b8160a001818152505061060a8460c001518560a00151611cea565b60c0820152600061061a8261173d565b60005490915061ffff6101009091041667ffffffffffffffff8216146106825760405162461bcd60e51b815260206004820152601760248201527f6d756c546573743a2063617374203634206661696c656400000000000000000060448201526064016103bc565b6106936102a3898760200151611d00565b60005461ffff6101009091041660ff919091161480156106d457506106bf6102a3866000015189611d52565b60005461ffff6101009091041660ff91909116145b6107305760405162461bcd60e51b815260206004820152602760248201527f6d756c546573743a2074657374203820626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016103bc565b6107496107448960ff168760600151611da5565b611bda565b600054610100900461ffff9081169116148015610787575061077561074486604001518960ff16611df9565b600054610100900461ffff9081169116145b6107e45760405162461bcd60e51b815260206004820152602860248201527f6d756c546573743a207465737420313620626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103bc565b6107fd6107f88960ff168760a00151611e4c565b611c57565b60005461ffff6101009091041663ffffffff91909116148015610847575061082f6107f886608001518960ff16611ea2565b60005461ffff6101009091041663ffffffff91909116145b6108a45760405162461bcd60e51b815260206004820152602860248201527f6d756c546573743a207465737420333220626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103bc565b6108bd6108b88960ff168760e00151611ef8565b611f52565b60005461ffff6101009091041667ffffffffffffffff9190911614801561090f57506108f36108b88660c001518960ff16611f62565b60005461ffff6101009091041667ffffffffffffffff91909116145b61096c5760405162461bcd60e51b815260206004820152602860248201527f6d756c546573743a207465737420363420626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103bc565b5050600054610100900461ffff169695505050505050565b6000806109948360000151611bda565b90506109a38360200151611bda565b61ffff168161ffff161480156109cc57506109c18360400151611bda565b61ffff168161ffff16145b610a4d5760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a4016103bc565b92915050565b6000610a9d60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610ac160405180606001604052806000815260200160008152602001600081525090565b610af36040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b610b336040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610b3e8488886119df565b610b536102a385600001518660200151611fbc565b6000806101000a81548160ff021916908360ff160217905550610b7e84604001518560600151611fd1565b835283516060850151610b919190611fe6565b836020018181525050610bac84604001518560200151611ffc565b60408401526000610bbc84610984565b60005490915060ff1661ffff821614610c175760405162461bcd60e51b815260206004820152601760248201527f737562546573743a2063617374203136206661696c656400000000000000000060448201526064016103bc565b610c2985608001518660a00151612012565b8352845160a0860151610c3c9190612027565b836020018181525050610c578560800151866020015161203d565b836040018181525050610c7285604001518660a00151612053565b836060018181525050610c8d85608001518660600151612069565b60808401526000610c9d846118c9565b60005490915060ff1663ffffffff821614610cfa5760405162461bcd60e51b815260206004820152601760248201527f737562546573743a2063617374203332206661696c656400000000000000000060448201526064016103bc565b610d0c8660c001518760e0015161207f565b8352855160e0870151610d1f9190612094565b836020018181525050610d3a8660c0015187602001516120aa565b836040018181525050610d5586604001518760e001516120c0565b836060018181525050610d708660c0015187606001516120d6565b836080018181525050610d8b86608001518760e001516120ec565b8360a0018181525050610da68660c001518760a00151612102565b60c08401526000610db68461173d565b60005490915060ff1667ffffffffffffffff821614610e175760405162461bcd60e51b815260206004820152601760248201527f737562546573743a2063617374203634206661696c656400000000000000000060448201526064016103bc565b610e286102a38b8960200151612118565b60005460ff9081169116148015610e575750610e4b6102a388600001518b61212d565b60005460ff9081169116145b610eb35760405162461bcd60e51b815260206004820152602760248201527f737562546573743a2074657374203820626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016103bc565b610ec76107448b60ff168960600151612143565b60005460ff1661ffff91909116148015610eff5750610ef061074488604001518b60ff16612159565b60005460ff1661ffff91909116145b610f5c5760405162461bcd60e51b815260206004820152602860248201527f737562546573743a207465737420313620626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103bc565b610f706107f88b60ff168960a0015161216f565b60005460ff1663ffffffff91909116148015610fac5750610f9b6107f888608001518b60ff16612185565b60005460ff1663ffffffff91909116145b6110095760405162461bcd60e51b815260206004820152602860248201527f737562546573743a207465737420333220626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103bc565b61101d6108b88b60ff168960e0015161219b565b60005460ff1667ffffffffffffffff91909116148015611061575061104c6108b88860c001518b60ff166121b1565b60005460ff1667ffffffffffffffff91909116145b6110be5760405162461bcd60e51b815260206004820152602860248201527f737562546573743a207465737420363420626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103bc565b505060005460ff1698975050505050505050565b600061111c60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61114060405180606001604052806000815260200160008152602001600081525090565b6111726040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6111b26040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6111bd8488886119df565b6111d26102a3856000015186602001516121c7565b6000806101000a81548160ff021916908360ff1602179055506111fd846040015185606001516121dc565b83528351606085015161121091906121f1565b83602001818152505061122b84604001518560200151612207565b6040840152600061123b84610984565b60005490915060ff1661ffff8216146112965760405162461bcd60e51b815260206004820152601760248201527f616464546573743a2063617374203136206661696c656400000000000000000060448201526064016103bc565b6112a885608001518660a0015161221d565b8352845160a08601516112bb9190612232565b8360200181815250506112d685608001518660200151612248565b8360400181815250506112f185604001518660a0015161225e565b83606001818152505061130c85608001518660600151612274565b6080840152600061131c846118c9565b60005490915060ff1663ffffffff8216146113795760405162461bcd60e51b815260206004820152601760248201527f616464546573743a2063617374203332206661696c656400000000000000000060448201526064016103bc565b61138b8660c001518760e0015161228a565b8352855160e087015161139e919061229f565b8360200181815250506113b98660c0015187602001516122b5565b8360400181815250506113d486604001518760e001516122cb565b8360600181815250506113ef8660c0015187606001516122e1565b83608001818152505061140a86608001518760e001516122f7565b8360a00181815250506114258660c001518760a0015161230d565b60c084015260006114358461173d565b60005490915060ff1667ffffffffffffffff8216146114965760405162461bcd60e51b815260206004820152601760248201527f616464546573743a2063617374203634206661696c656400000000000000000060448201526064016103bc565b6114a76102a38b8960200151612323565b60005460ff90811691161480156114d657506114ca6102a388600001518b612338565b60005460ff9081169116145b6115325760405162461bcd60e51b815260206004820152602760248201527f616464546573743a2074657374203820626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016103bc565b6115466107448b60ff16896060015161234e565b60005460ff1661ffff9190911614801561157e575061156f61074488604001518b60ff16612364565b60005460ff1661ffff91909116145b6115db5760405162461bcd60e51b815260206004820152602860248201527f616464546573743a207465737420313620626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103bc565b6115ef6107f88b60ff168960a00151612379565b60005460ff1663ffffffff9190911614801561162b575061161a6107f888608001518b60ff1661238f565b60005460ff1663ffffffff91909116145b6116885760405162461bcd60e51b815260206004820152602860248201527f616464546573743a207465737420333220626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103bc565b61169c6108b88b60ff168960e001516123a5565b60005460ff1667ffffffffffffffff919091161480156116e057506116cb6108b88860c001518b60ff166123bb565b60005460ff1667ffffffffffffffff91909116145b6110be5760405162461bcd60e51b815260206004820152602860248201527f616464546573743a207465737420363420626974732077697468207363616c616044820152671c8819985a5b195960c21b60648201526084016103bc565b60008061174d8360000151611f52565b905061175c8360200151611f52565b67ffffffffffffffff168167ffffffffffffffff1614801561179d57506117868360400151611f52565b67ffffffffffffffff168167ffffffffffffffff16145b80156117c857506117b18360800151611f52565b67ffffffffffffffff168167ffffffffffffffff16145b80156117f357506117dc8360600151611f52565b67ffffffffffffffff168167ffffffffffffffff16145b801561181e57506118078360c00151611f52565b67ffffffffffffffff168167ffffffffffffffff16145b80156109cc57506118328360a00151611f52565b67ffffffffffffffff168167ffffffffffffffff1614610a4d5760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a4016103bc565b6000806118d98360000151611c57565b90506118e88360200151611c57565b63ffffffff168163ffffffff16148015611919575061190a8360400151611c57565b63ffffffff168163ffffffff16145b801561193c575061192d8360800151611c57565b63ffffffff168163ffffffff16145b80156109cc57506119508360600151611c57565b63ffffffff168163ffffffff1614610a4d5760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a4016103bc565b6119e8826123d1565b83526119f3816123d1565b6020840152611a0460ff8316612421565b6040840152611a1560ff8216612421565b6060840152611a2660ff8316612472565b6080840152611a3760ff8216612472565b60a0840152611a4860ff83166124c5565b60c0840152611a5960ff82166124c5565b60e0909301929092525050565b6000606463f1d21bb4611a7b6001808561251c565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015260248101869052604481018590526064015b6020604051808303816000875af1158015611ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af59190612817565b9392505050565b60006064630cfed56160015b60f81b846040518363ffffffff1660e01b8152600401611b569291907fff00000000000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b6020604051808303816000875af1158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4d9190612817565b6000606463f1d21bb4611a7b6002808561251c565b6000606463f1d21bb4611a7b600160028561251c565b6000606463f1d21bb4611a7b600260018561251c565b60006064630cfed5616002611b08565b6000606463f1d21bb4611a7b6003808561251c565b6000606463f1d21bb4611a7b600160038561251c565b6000606463f1d21bb4611a7b600360018561251c565b6000606463f1d21bb4611a7b600260038561251c565b6000606463f1d21bb4611a7b600360028561251c565b60006064630cfed5616003611b08565b6000606463f1d21bb4611a7b6004808561251c565b6000606463f1d21bb4611a7b600160048561251c565b6000606463f1d21bb4611a7b600460018561251c565b6000606463f1d21bb4611a7b600260048561251c565b6000606463f1d21bb4611a7b600460028561251c565b6000606463f1d21bb4611a7b600360048561251c565b6000606463f1d21bb4611a7b600460038561251c565b6000606463f1d21bb4611d156001808061251c565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015260ff8616602482015260448101859052606401611ab2565b6000606463f1d21bb4611d68600180600261251c565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905260ff85166044820152606401611ab2565b6000606463f1d21bb4611dbb600280600161251c565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015261ffff8616602482015260448101859052606401611ab2565b6000606463f1d21bb4611e0e6002808061251c565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905261ffff85166044820152606401611ab2565b6000606463f1d21bb4611e62600380600161251c565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015263ffffffff8616602482015260448101859052606401611ab2565b6000606463f1d21bb4611eb8600380600261251c565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905263ffffffff85166044820152606401611ab2565b6000606463f1d21bb4611f0e600480600161251c565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015267ffffffffffffffff8616602482015260448101859052606401611ab2565b60006064630cfed5616004611b08565b6000606463f1d21bb4611f78600480600261251c565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905267ffffffffffffffff85166044820152606401611ab2565b6000606463371d1bf2611a7b6001808561251c565b6000606463371d1bf2611a7b6002808561251c565b6000606463371d1bf2611a7b600160028561251c565b6000606463371d1bf2611a7b600260018561251c565b6000606463371d1bf2611a7b6003808561251c565b6000606463371d1bf2611a7b600160038561251c565b6000606463371d1bf2611a7b600360018561251c565b6000606463371d1bf2611a7b600260038561251c565b6000606463371d1bf2611a7b600360028561251c565b6000606463371d1bf2611a7b6004808561251c565b6000606463371d1bf2611a7b600160048561251c565b6000606463371d1bf2611a7b600460018561251c565b6000606463371d1bf2611a7b600260048561251c565b6000606463371d1bf2611a7b600460028561251c565b6000606463371d1bf2611a7b600360048561251c565b6000606463371d1bf2611a7b600460038561251c565b6000606463371d1bf2611d156001808061251c565b6000606463371d1bf2611d68600180600261251c565b6000606463371d1bf2611dbb600280600161251c565b6000606463371d1bf2611e0e600180600261251c565b6000606463371d1bf2611e62600380600161251c565b6000606463371d1bf2611eb8600380600261251c565b6000606463371d1bf2611f0e600480600161251c565b6000606463371d1bf2611f78600480600261251c565b60006064638c5d0150611a7b6001808561251c565b60006064638c5d0150611a7b6002808561251c565b60006064638c5d0150611a7b600160028561251c565b60006064638c5d0150611a7b600260018561251c565b60006064638c5d0150611a7b6003808561251c565b60006064638c5d0150611a7b600160038561251c565b60006064638c5d0150611a7b600360018561251c565b60006064638c5d0150611a7b600260038561251c565b60006064638c5d0150611a7b600360028561251c565b60006064638c5d0150611a7b6004808561251c565b60006064638c5d0150611a7b600160048561251c565b60006064638c5d0150611a7b600460018561251c565b60006064638c5d0150611a7b600260048561251c565b60006064638c5d0150611a7b600460028561251c565b60006064638c5d0150611a7b600360048561251c565b60006064638c5d0150611a7b600460038561251c565b60006064638c5d0150611d156001808061251c565b60006064638c5d0150611d68600180600261251c565b60006064638c5d0150611dbb600280600161251c565b60006064638c5d0150611e0e6002808061251c565b60006064638c5d0150611e62600380600161251c565b60006064638c5d0150611eb8600380600261251c565b60006064638c5d0150611f0e600480600161251c565b60006064638c5d0150611f78600480600261251c565b6040516306cdb05b60e51b81527f0100000000000000000000000000000000000000000000000000000000000000600482015260ff8216602482015260009060649063d9b60b6090604401611b56565b6040516306cdb05b60e51b81527f0200000000000000000000000000000000000000000000000000000000000000600482015261ffff8216602482015260009060649063d9b60b6090604401611b56565b6040516306cdb05b60e51b81527f0300000000000000000000000000000000000000000000000000000000000000600482015263ffffffff8216602482015260009060649063d9b60b6090604401611b56565b6040516306cdb05b60e51b81527f0400000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff8216602482015260009060649063d9b60b6090604401611b56565b600081600281111561253057612530612830565b60ff16600884600481111561254757612547612830565b61ffff16901b61ffff16601086600481111561256557612565612830565b62ffffff16901b171760e81b949350505050565b803560ff8116811461258a57600080fd5b919050565b600080604083850312156125a257600080fd5b6125ab83612579565b91506125b960208401612579565b90509250929050565b604051610100810167ffffffffffffffff811182821017156125f457634e487b7160e01b600052604160045260246000fd5b60405290565b60006060828403121561260c57600080fd5b6040516060810181811067ffffffffffffffff8211171561263d57634e487b7160e01b600052604160045260246000fd5b80604052508235815260208301356020820152604083013560408201528091505092915050565b600060e0828403121561267657600080fd5b60405160e0810181811067ffffffffffffffff821117156126a757634e487b7160e01b600052604160045260246000fd5b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528091505092915050565b600060a0828403121561270857600080fd5b60405160a0810181811067ffffffffffffffff8211171561273957634e487b7160e01b600052604160045260246000fd5b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b600080600083850361014081121561278b57600080fd5b6101008082121561279b57600080fd5b6127a36125c2565b9150853582526020860135602083015260408601356040830152606086013560608301526080860135608083015260a086013560a083015260c086013560c083015260e086013560e08301528194506127fd818701612579565b9350505061280e6101208501612579565b90509250925092565b60006020828403121561282957600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122005a150517b0ec7a3ed0207245da0fd8d41c4d19e85d233180537a52b0e0515e564736f6c63430008140033";

type ArithmeticTestsContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArithmeticTestsContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArithmeticTestsContract__factory extends ContractFactory {
  constructor(...args: ArithmeticTestsContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ArithmeticTestsContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ArithmeticTestsContract__factory {
    return super.connect(runner) as ArithmeticTestsContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArithmeticTestsContractInterface {
    return new Interface(_abi) as ArithmeticTestsContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ArithmeticTestsContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ArithmeticTestsContract;
  }
}
