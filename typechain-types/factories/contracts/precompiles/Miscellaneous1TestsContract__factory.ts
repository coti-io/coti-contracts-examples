/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Miscellaneous1TestsContract,
  Miscellaneous1TestsContractInterface,
} from "../../../contracts/precompiles/Miscellaneous1TestsContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "a",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "b",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "bit",
        type: "bool",
      },
    ],
    name: "booleanTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64[10]",
        name: "randoms",
        type: "uint64[10]",
      },
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "numBits",
        type: "uint8",
      },
    ],
    name: "checkBound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBooleanResults",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRandom",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "isBounded",
        type: "bool",
      },
      {
        internalType: "uint8",
        name: "numBits",
        type: "uint8",
      },
    ],
    name: "randTest_",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "numBits",
        type: "uint8",
      },
    ],
    name: "randomBoundedTest",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "randomTest",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600080546001600160401b031916905534801561002057600080fd5b506111a0806100306000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063926605781161005b5780639266057814610190578063aacc5a17146101a5578063dbc221d0146101b7578063dfbba08f146101ca57600080fd5b8063103bdb8714610082578063598f95791461015c5780635adb577814610188575b600080fd5b6000546040805160ff680100000000000000008404811615158252690100000000000000000084048116151560208301526a0100000000000000000000840481161515928201929092526b01000000000000000000000083048216151560608201526c0100000000000000000000000083048216151560808201526d010000000000000000000000000083048216151560a08201526e01000000000000000000000000000083048216151560c08201526f0100000000000000000000000000000090920416151560e0820152610100015b60405180910390f35b61016f61016a366004610f7c565b6101dd565b60405167ffffffffffffffff9091168152602001610153565b61016f6101f0565b6101a361019e366004610fa7565b610202565b005b60005467ffffffffffffffff1661016f565b6101a36101c5366004611018565b6104a5565b61016f6101d83660046110ac565b610582565b60006101ea600183610582565b92915050565b60006101fd600080610582565b905090565b600061020d846108c6565b9050600061021a846108c6565b90506000610227846108c6565b905061023b610236848461096a565b610a03565b6000805491151568010000000000000000027fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff9092169190911790556102846102368484610a94565b600080549115156901000000000000000000027fffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffff9092169190911790556102ce6102368484610aa8565b600080549115156a0100000000000000000000027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff90921691909117905561031861023684610abc565b600080549115156b010000000000000000000000027fffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff9092169190911790556103646102368484610b58565b600080549115156c01000000000000000000000000027fffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffff9092169190911790556103b16102368484610b6c565b600080549115156d0100000000000000000000000000027fffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffff909216919091179055610400610236828585610b80565b600080549115156e010000000000000000000000000000027fffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffff90921691909117815561044b84610c4c565b905061045961023682610c5b565b600080549115156f01000000000000000000000000000000027fffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffff90921691909117905550505050505050565b60005b8281101561057c57600160ff83161b8482600a81106104c9576104c96110df565b602002015167ffffffffffffffff161061056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f72616e646f6d546573743a2072616e646f6d206661696c65642c206f7574206f60448201527f6620626f756e647300000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b80610574816110f5565b9150506104a8565b50505050565b6000600a61058e610f47565b60005b8281101561062457856105dc576105ae6105a9610c6a565b610d00565b60ff168282600a81106105c3576105c36110df565b67ffffffffffffffff9092166020929092020152610612565b6105e86105a986610d10565b60ff168282600a81106105fd576105fd6110df565b67ffffffffffffffff90921660209290920201525b8061061c816110f5565b915050610591565b508051600080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9092169190911790558415610670576106708183866104a5565b61067a8183610d6d565b8461068457600391505b60005b8281101561071c57856106d3576106a461069f610e5a565b610e6a565b61ffff168282600a81106106ba576106ba6110df565b67ffffffffffffffff909216602092909202015261070a565b6106df61069f86610e7a565b61ffff168282600a81106106f5576106f56110df565b67ffffffffffffffff90921660209290920201525b80610714816110f5565b915050610687565b50841561072e5761072e8183866104a5565b6107388183610d6d565b8461074257600391505b60005b828110156107de57856107935761076261075d610e8a565b610e9a565b63ffffffff168282600a811061077a5761077a6110df565b67ffffffffffffffff90921660209290920201526107cc565b61079f61075d86610eaa565b63ffffffff168282600a81106107b7576107b76110df565b67ffffffffffffffff90921660209290920201525b806107d6816110f5565b915050610745565b5084156107f0576107f08183866104a5565b6107fa8183610d6d565b8461080457600291505b60005b82811015610894578561084f5761082461081f610eba565b610eca565b8282600a8110610836576108366110df565b67ffffffffffffffff9092166020929092020152610882565b61085b61081f86610eda565b8282600a811061086d5761086d6110df565b67ffffffffffffffff90921660209290920201525b8061088c816110f5565b915050610807565b5084156108a6576108a68183866104a5565b6108b08183610d6d565b505060005467ffffffffffffffff169392505050565b600080826108d55760006108d8565b60015b6040517fd9b60b600000000000000000000000000000000000000000000000000000000081526000600482015260ff9190911660248201819052915060649063d9b60b60906044016020604051808303816000875af115801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190611151565b9392505050565b6000606463fe9c73d161097e838080610eea565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681527fffffff0000000000000000000000000000000000000000000000000000000000909116600482015260248101869052604481018590526064016020604051808303816000875af115801561093f573d6000803e3d6000fd5b6040517f0cfed56100000000000000000000000000000000000000000000000000000000815260006004820181905260248201839052908190606490630cfed561906044016020604051808303816000875af1158015610a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8b9190611151565b15159392505050565b6000606463fb7da35f61097e838080610eea565b60006064636f962e2c61097e838080610eea565b60006064631d79e49a825b60f81b846040518363ffffffff1660e01b8152600401610b159291907fff00000000000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b6020604051808303816000875af1158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ea9190611151565b60006064637c12a1eb61097e838080610eea565b600060646342094c5661097e838080610eea565b600060646320cc408d610b94838080610eea565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681527fffffff000000000000000000000000000000000000000000000000000000000090911660048201526024810187905260448101869052606481018590526084016020604051808303816000875af1158015610c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c449190611151565b949350505050565b6000606463c50c9c0282610ac7565b6000606463d2c135e582610ac7565b6000606463134eb89060015b60f81b6040518263ffffffff1660e01b8152600401610cbd91907fff0000000000000000000000000000000000000000000000000000000000000091909116815260200190565b6020604051808303816000875af1158015610cdc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fd9190611151565b60006064630cfed5616001610ac7565b6000606463072d17fc60015b60f81b846040518363ffffffff1660e01b8152600401610b159291907fff0000000000000000000000000000000000000000000000000000000000000092909216825260ff16602082015260400190565b6001805b82811015610dc5578381600a8110610d8b57610d8b6110df565b6020020151845167ffffffffffffffff918216911603610db35781610daf816110f5565b9250505b80610dbd816110f5565b915050610d71565b50818103610e55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f72616e646f6d546573743a2072616e646f6d206661696c65642c20616c6c207660448201527f616c75657320617265207468652073616d6500000000000000000000000000006064820152608401610561565b505050565b6000606463134eb8906002610c76565b60006064630cfed5616002610ac7565b6000606463072d17fc6002610d1c565b6000606463134eb8906003610c76565b60006064630cfed5616003610ac7565b6000606463072d17fc6003610d1c565b6000606463134eb8906004610c76565b60006064630cfed5616004610ac7565b6000606463072d17fc6004610d1c565b6000816002811115610efe57610efe61113b565b60ff166008846004811115610f1557610f1561113b565b61ffff16901b61ffff166010866004811115610f3357610f3361113b565b62ffffff16901b171760e81b949350505050565b604051806101400160405280600a906020820280368337509192915050565b803560ff81168114610f7757600080fd5b919050565b600060208284031215610f8e57600080fd5b61096382610f66565b80358015158114610f7757600080fd5b600080600060608486031215610fbc57600080fd5b610fc584610f97565b9250610fd360208501610f97565b9150610fe160408501610f97565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b803567ffffffffffffffff81168114610f7757600080fd5b6000806000610180848603121561102e57600080fd5b84601f85011261103d57600080fd5b60405161014080820182811067ffffffffffffffff8211171561106257611062610fea565b6040528501818782111561107557600080fd5b865b828110156110965761108881611000565b825260209182019101611077565b50919450359250610fe190506101608501610f66565b600080604083850312156110bf57600080fd5b6110c883610f97565b91506110d660208401610f66565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361113457634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561116357600080fd5b505191905056fea26469706673582212203c6732361fd19e2fc15eaa1227484a476f4d7fda72715a957478530d6c49d44d64736f6c63430008140033";

type Miscellaneous1TestsContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Miscellaneous1TestsContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Miscellaneous1TestsContract__factory extends ContractFactory {
  constructor(...args: Miscellaneous1TestsContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Miscellaneous1TestsContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): Miscellaneous1TestsContract__factory {
    return super.connect(runner) as Miscellaneous1TestsContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Miscellaneous1TestsContractInterface {
    return new Interface(_abi) as Miscellaneous1TestsContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Miscellaneous1TestsContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as Miscellaneous1TestsContract;
  }
}
