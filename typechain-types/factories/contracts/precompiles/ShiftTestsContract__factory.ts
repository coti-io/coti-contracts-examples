/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ShiftTestsContract,
  ShiftTestsContractInterface,
} from "../../../contracts/precompiles/ShiftTestsContract";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint16",
            name: "res16_16",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "res8_16",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "res16_8",
            type: "uint256",
          },
        ],
        internalType: "struct ShiftTestsContract.Check16",
        name: "check16",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint32",
            name: "res32_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res8_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res32_8",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res16_32",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "res32_16",
            type: "uint256",
          },
        ],
        internalType: "struct ShiftTestsContract.Check32",
        name: "check32",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults32",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint64",
            name: "res64_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res8_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_8",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res16_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_16",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res32_64",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "res64_32",
            type: "uint256",
          },
        ],
        internalType: "struct ShiftTestsContract.Check64",
        name: "check64",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults64",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllShiftResults",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getResult",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint8",
            name: "a8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint8",
            name: "b8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "a16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "b16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "a32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "b32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "a64_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "b64_s",
            type: "uint256",
          },
        ],
        internalType: "struct ShiftTestsContract.AllGTCastingValues",
        name: "castingValues",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "setPublicValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "shlTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "shrTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611eb5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063d2becd381161005b578063d2becd381461015b578063de29278914610195578063ebb571fd146101ae578063ee49a6ea146101c357600080fd5b806308e9d12a1461008d5780632e544aa0146100e157806380f937bc14610107578063acb3816914610133575b600080fd5b6100a061009b366004611bc8565b6101d6565b6040805160ff909516855261ffff909316602085015263ffffffff9091169183019190915267ffffffffffffffff1660608201526080015b60405180910390f35b6100f46100ef366004611c33565b61081f565b60405161ffff90911681526020016100d8565b61011a610115366004611c9d565b6108ee565b60405167ffffffffffffffff90911681526020016100d8565b610146610141366004611d2f565b610a7a565b60405163ffffffff90911681526020016100d8565b60005460ff811690610100810461ffff16906301000000810463ffffffff1690670100000000000000900467ffffffffffffffff166100a0565b60005460ff165b60405160ff90911681526020016100d8565b6101c16101bc366004611dad565b610b90565b005b61019c6101d1366004611bc8565b610c17565b60008060008061022460405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61024860405180606001604052806000815260200160008152602001600081525090565b61027a6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6102ba6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6102c5848b8b610b90565b6102df6102da856000015186602001516112ac565b611342565b6000806101000a81548160ff021916908360ff16021790555061030a846040015185606001516113df565b83528351606085015161031d91906113f4565b8360200181815250506103388460400151856020015161140a565b60408401526103468361081f565b600060016101000a81548161ffff021916908361ffff16021790555061037484608001518560a00151611420565b8252835160a08501516103879190611435565b8260200181815250506103a28460800151856020015161144b565b8260400181815250506103bd84604001518560a00151611461565b8260600181815250506103d884608001518560600151611477565b60808301526103e682610a7a565b600060036101000a81548163ffffffff021916908363ffffffff1602179055506104188460c001518560e0015161148d565b8152835160e085015161042b91906114a2565b8160200181815250506104468460c0015185602001516114b8565b81604001818152505061046184604001518560e001516114ce565b81606001818152505061047c8460c0015185606001516114e4565b81608001818152505061049784608001518560e001516114fa565b8160a00181815250506104b28460c001518560a00151611510565b60c08201526104c0816108ee565b600060076101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506104f96102da8b8660200151611526565b60005460ff9081169116148015610528575061051c6102da85600001518b611578565b60005460ff9081169116145b61059f5760405162461bcd60e51b815260206004820152602760248201527f73686c546573743a2074657374203820626974732077697468207363616c617260448201527f206661696c65640000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6105b86105b38b60ff1686606001516115cb565b61161f565b600054610100900461ffff90811691161480156105f657506105e46105b385604001518b60ff1661162f565b600054610100900461ffff9081169116145b6106535760405162461bcd60e51b815260206004820152602860248201527f73686c546573743a207465737420313620626974732077697468207363616c616044820152671c8819985a5b195960c21b6064820152608401610596565b61066c6106678b60ff168660a00151611683565b6116d9565b6000546301000000900463ffffffff90811691161480156106b2575061069c61066785608001518b60ff166116e9565b6000546301000000900463ffffffff9081169116145b61070f5760405162461bcd60e51b815260206004820152602860248201527f73686c546573743a207465737420333220626974732077697468207363616c616044820152671c8819985a5b195960c21b6064820152608401610596565b6107286107238b60ff168660e0015161173f565b611799565b600054670100000000000000900467ffffffffffffffff908116911614801561077e57506107606107238560c001518b60ff166117a9565b600054670100000000000000900467ffffffffffffffff9081169116145b6107db5760405162461bcd60e51b815260206004820152602860248201527f73686c546573743a207465737420363420626974732077697468207363616c616044820152671c8819985a5b195960c21b6064820152608401610596565b505060005460ff811699610100820461ffff1699506301000000820463ffffffff16985067010000000000000090910467ffffffffffffffff169650945050505050565b60008061082f836000015161161f565b905061083e836020015161161f565b61ffff168161ffff16148015610867575061085c836040015161161f565b61ffff168161ffff16145b6108e85760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a401610596565b92915050565b6000806108fe8360000151611799565b905061090d8360200151611799565b67ffffffffffffffff168167ffffffffffffffff1614801561094e57506109378360400151611799565b67ffffffffffffffff168167ffffffffffffffff16145b801561097957506109628360800151611799565b67ffffffffffffffff168167ffffffffffffffff16145b80156109a4575061098d8360600151611799565b67ffffffffffffffff168167ffffffffffffffff16145b80156109cf57506109b88360c00151611799565b67ffffffffffffffff168167ffffffffffffffff16145b801561086757506109e38360a00151611799565b67ffffffffffffffff168167ffffffffffffffff16146108e85760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a401610596565b600080610a8a83600001516116d9565b9050610a9983602001516116d9565b63ffffffff168163ffffffff16148015610aca5750610abb83604001516116d9565b63ffffffff168163ffffffff16145b8015610aed5750610ade83608001516116d9565b63ffffffff168163ffffffff16145b80156108675750610b0183606001516116d9565b63ffffffff168163ffffffff16146108e85760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c20726064820152656573756c747360d01b608482015260a401610596565b610b9982611803565b8352610ba481611803565b6020840152610bb560ff8316611853565b6040840152610bc660ff8216611853565b6060840152610bd760ff83166118a4565b6080840152610be860ff82166118a4565b60a0840152610bf960ff83166118f7565b60c0840152610c0a60ff82166118f7565b60e0909301929092525050565b6000610c6160405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610c8560405180606001604052806000815260200160008152602001600081525090565b610cb76040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b610cf76040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610d02848888610b90565b610d176102da8560000151866020015161194e565b6000806101000a81548160ff021916908360ff160217905550610d4284604001518560600151611963565b835283516060850151610d559190611978565b836020018181525050610d708460400151856020015161198e565b60408401526000610d808461081f565b60005490915060ff1661ffff821614610ddb5760405162461bcd60e51b815260206004820152601760248201527f736872546573743a2063617374203136206661696c65640000000000000000006044820152606401610596565b610ded85608001518660a001516119a4565b8352845160a0860151610e0091906119b9565b836020018181525050610e1b856080015186602001516119cf565b836040018181525050610e3685604001518660a001516119e5565b836060018181525050610e51856080015186606001516119fb565b60808401526000610e6184610a7a565b60005490915060ff1663ffffffff821614610ebe5760405162461bcd60e51b815260206004820152601760248201527f736872546573743a2063617374203332206661696c65640000000000000000006044820152606401610596565b610ed08660c001518760e00151611a11565b8352855160e0870151610ee39190611a26565b836020018181525050610efe8660c001518760200151611a3c565b836040018181525050610f1986604001518760e00151611a52565b836060018181525050610f348660c001518760600151611a68565b836080018181525050610f4f86608001518760e00151611a7e565b8360a0018181525050610f6a8660c001518760a00151611a94565b60c08401526000610f7a846108ee565b60005490915060ff1667ffffffffffffffff821614610fdb5760405162461bcd60e51b815260206004820152601760248201527f736872546573743a2063617374203634206661696c65640000000000000000006044820152606401610596565b610fec6102da8b8960200151611aaa565b60005460ff908116911614801561101b575061100f6102da88600001518b611abf565b60005460ff9081169116145b61108d5760405162461bcd60e51b815260206004820152602760248201527f736872546573743a2074657374203820626974732077697468207363616c617260448201527f206661696c6564000000000000000000000000000000000000000000000000006064820152608401610596565b6110a16105b38b60ff168960600151611ad5565b60005460ff1661ffff919091161480156110d957506110ca6105b388604001518b60ff16611aeb565b60005460ff1661ffff91909116145b6111365760405162461bcd60e51b815260206004820152602860248201527f736872546573743a207465737420313620626974732077697468207363616c616044820152671c8819985a5b195960c21b6064820152608401610596565b61114a6106678b60ff168960a00151611b01565b60005460ff1663ffffffff91909116148015611186575061117561066788608001518b60ff16611b17565b60005460ff1663ffffffff91909116145b6111e35760405162461bcd60e51b815260206004820152602860248201527f736872546573743a207465737420333220626974732077697468207363616c616044820152671c8819985a5b195960c21b6064820152608401610596565b6111f76107238b60ff168960e00151611b2d565b60005460ff1667ffffffffffffffff9190911614801561123b57506112266107238860c001518b60ff16611b43565b60005460ff1667ffffffffffffffff91909116145b6112985760405162461bcd60e51b815260206004820152602860248201527f736872546573743a207465737420363420626974732077697468207363616c616044820152671c8819985a5b195960c21b6064820152608401610596565b505060005460ff1698975050505050505050565b60006064631135f71a6112c160018085611b55565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015260248101869052604481018590526064015b6020604051808303816000875af1158015611317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133b9190611e50565b9392505050565b60006064630cfed56160015b60f81b846040518363ffffffff1660e01b815260040161139c9291907fff00000000000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b6020604051808303816000875af11580156113bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e89190611e50565b60006064631135f71a6112c160028085611b55565b60006064631135f71a6112c16001600285611b55565b60006064631135f71a6112c16002600185611b55565b60006064631135f71a6112c160038085611b55565b60006064631135f71a6112c16001600385611b55565b60006064631135f71a6112c16003600185611b55565b60006064631135f71a6112c16002600385611b55565b60006064631135f71a6112c16003600285611b55565b60006064631135f71a6112c160048085611b55565b60006064631135f71a6112c16001600485611b55565b60006064631135f71a6112c16004600185611b55565b60006064631135f71a6112c16002600485611b55565b60006064631135f71a6112c16004600285611b55565b60006064631135f71a6112c16003600485611b55565b60006064631135f71a6112c16004600385611b55565b60006064631135f71a61153b60018080611b55565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015260ff86166024820152604481018590526064016112f8565b60006064631135f71a61158e6001806002611b55565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905260ff851660448201526064016112f8565b60006064631135f71a6115e16002806001611b55565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015261ffff86166024820152604481018590526064016112f8565b60006064630cfed561600261134e565b60006064631135f71a6116456001806002611b55565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905261ffff851660448201526064016112f8565b60006064631135f71a6116996003806001611b55565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015263ffffffff86166024820152604481018590526064016112f8565b60006064630cfed561600361134e565b60006064631135f71a6116ff6003806002611b55565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905263ffffffff851660448201526064016112f8565b60006064631135f71a6117556004806001611b55565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015267ffffffffffffffff86166024820152604481018590526064016112f8565b60006064630cfed561600461134e565b60006064631135f71a6117bf6004806002611b55565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905267ffffffffffffffff851660448201526064016112f8565b6040516306cdb05b60e51b81527f0100000000000000000000000000000000000000000000000000000000000000600482015260ff8216602482015260009060649063d9b60b609060440161139c565b6040516306cdb05b60e51b81527f0200000000000000000000000000000000000000000000000000000000000000600482015261ffff8216602482015260009060649063d9b60b609060440161139c565b6040516306cdb05b60e51b81527f0300000000000000000000000000000000000000000000000000000000000000600482015263ffffffff8216602482015260009060649063d9b60b609060440161139c565b6040516306cdb05b60e51b81527f0400000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff8216602482015260009060649063d9b60b609060440161139c565b600060646339bd1d8d6112c160018085611b55565b600060646339bd1d8d6112c160028085611b55565b600060646339bd1d8d6112c16001600285611b55565b600060646339bd1d8d6112c16002600185611b55565b600060646339bd1d8d6112c160038085611b55565b600060646339bd1d8d6112c16001600385611b55565b600060646339bd1d8d6112c16003600185611b55565b600060646339bd1d8d6112c16002600385611b55565b600060646339bd1d8d6112c16003600285611b55565b600060646339bd1d8d6112c160048085611b55565b600060646339bd1d8d6112c16001600485611b55565b600060646339bd1d8d6112c16004600185611b55565b600060646339bd1d8d6112c16002600485611b55565b600060646339bd1d8d6112c16004600285611b55565b600060646339bd1d8d6112c16003600485611b55565b600060646339bd1d8d6112c16004600385611b55565b600060646339bd1d8d61153b60018080611b55565b600060646339bd1d8d61158e6001806002611b55565b600060646339bd1d8d6115e16002806001611b55565b600060646339bd1d8d6116456001806002611b55565b600060646339bd1d8d6116996003806001611b55565b600060646339bd1d8d6116ff6003806002611b55565b600060646339bd1d8d6117556004806001611b55565b600060646339bd1d8d6117bf60048060025b6000816002811115611b6957611b69611e69565b60ff166008846004811115611b8057611b80611e69565b61ffff16901b61ffff166010866004811115611b9e57611b9e611e69565b62ffffff16901b171760e81b949350505050565b803560ff81168114611bc357600080fd5b919050565b60008060408385031215611bdb57600080fd5b611be483611bb2565b9150611bf260208401611bb2565b90509250929050565b604051610100810167ffffffffffffffff81118282101715611c2d57634e487b7160e01b600052604160045260246000fd5b60405290565b600060608284031215611c4557600080fd5b6040516060810181811067ffffffffffffffff82111715611c7657634e487b7160e01b600052604160045260246000fd5b80604052508235815260208301356020820152604083013560408201528091505092915050565b600060e08284031215611caf57600080fd5b60405160e0810181811067ffffffffffffffff82111715611ce057634e487b7160e01b600052604160045260246000fd5b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528091505092915050565b600060a08284031215611d4157600080fd5b60405160a0810181811067ffffffffffffffff82111715611d7257634e487b7160e01b600052604160045260246000fd5b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b6000806000838503610140811215611dc457600080fd5b61010080821215611dd457600080fd5b611ddc611bfb565b9150853582526020860135602083015260408601356040830152606086013560608301526080860135608083015260a086013560a083015260c086013560c083015260e086013560e0830152819450611e36818701611bb2565b93505050611e476101208501611bb2565b90509250925092565b600060208284031215611e6257600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122056f7d8e7119ef247551bf3fb9eaf66be109f67a895726abb3f14ccfc71f9e1de64736f6c63430008140033";

type ShiftTestsContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShiftTestsContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ShiftTestsContract__factory extends ContractFactory {
  constructor(...args: ShiftTestsContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ShiftTestsContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ShiftTestsContract__factory {
    return super.connect(runner) as ShiftTestsContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShiftTestsContractInterface {
    return new Interface(_abi) as ShiftTestsContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ShiftTestsContract {
    return new Contract(address, _abi, runner) as unknown as ShiftTestsContract;
  }
}
