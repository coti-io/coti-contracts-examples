/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Comparison2TestsContract,
  Comparison2TestsContractInterface,
} from "../../../contracts/precompiles/Comparison2TestsContract";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtBool",
            name: "res16_16",
            type: "uint256",
          },
          {
            internalType: "gtBool",
            name: "res8_16",
            type: "uint256",
          },
          {
            internalType: "gtBool",
            name: "res16_8",
            type: "uint256",
          },
        ],
        internalType: "struct Comparison2TestsContract.Check16",
        name: "check16",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults16",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtBool",
            name: "res32_32",
            type: "uint256",
          },
          {
            internalType: "gtBool",
            name: "res8_32",
            type: "uint256",
          },
          {
            internalType: "gtBool",
            name: "res32_8",
            type: "uint256",
          },
          {
            internalType: "gtBool",
            name: "res16_32",
            type: "uint256",
          },
          {
            internalType: "gtBool",
            name: "res32_16",
            type: "uint256",
          },
        ],
        internalType: "struct Comparison2TestsContract.Check32",
        name: "check32",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults32",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtBool",
            name: "res64_64",
            type: "uint256",
          },
          {
            internalType: "gtBool",
            name: "res8_64",
            type: "uint256",
          },
          {
            internalType: "gtBool",
            name: "res64_8",
            type: "uint256",
          },
          {
            internalType: "gtBool",
            name: "res16_64",
            type: "uint256",
          },
          {
            internalType: "gtBool",
            name: "res64_16",
            type: "uint256",
          },
          {
            internalType: "gtBool",
            name: "res32_64",
            type: "uint256",
          },
          {
            internalType: "gtBool",
            name: "res64_32",
            type: "uint256",
          },
        ],
        internalType: "struct Comparison2TestsContract.Check64",
        name: "check64",
        type: "tuple",
      },
    ],
    name: "decryptAndCompareResults64",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "eqTest",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "geTest",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getResult",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "neTest",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint8",
            name: "a8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint8",
            name: "b8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "a16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "b16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "a32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "b32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "a64_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "b64_s",
            type: "uint256",
          },
        ],
        internalType: "struct Comparison2TestsContract.AllGTCastingValues",
        name: "castingValues",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
    ],
    name: "setPublicValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061249f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063acb381691161005b578063acb38169146100ed578063bc3aa1ed14610100578063de29278914610113578063ebb571fd1461011e57600080fd5b80631988e3221461008d5780632e544aa0146100b457806370eb37ee146100c757806380f937bc146100da575b600080fd5b6100a061009b3660046121b2565b610133565b604051901515815260200160405180910390f35b6100a06100c236600461221d565b610790565b6100a06100d53660046121b2565b61086e565b6100a06100e8366004612287565b610ead565b6100a06100fb366004612319565b610f52565b6100a061010e3660046121b2565b610fc1565b60005460ff166100a0565b61013161012c366004612397565b611600565b005b600061017d60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6101a160405180606001604052806000815260200160008152602001600081525090565b6101d36040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6102136040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61021e848888611600565b61023861023385600001518660200151611687565b61171d565b6000805460ff19169115159190911790556040840151606085015161025d91906117ae565b83528351606085015161027091906117c3565b83602001818152505061028b846040015185602001516117d9565b6040840152600061029b84610790565b60005490915060ff161515811515146102fb5760405162461bcd60e51b815260206004820152601660248201527f6765546573743a2063617374203136206661696c65640000000000000000000060448201526064015b60405180910390fd5b61030d85608001518660a001516117ef565b8352845160a08601516103209190611804565b83602001818152505061033b8560800151866020015161181a565b83604001818152505061035685604001518660a00151611830565b83606001818152505061037185608001518660600151611846565b6080840152600061038184610f52565b60005490915060ff161515811515146103dc5760405162461bcd60e51b815260206004820152601660248201527f6765546573743a2063617374203332206661696c65640000000000000000000060448201526064016102f2565b6103ee8660c001518760e0015161185c565b8352855160e08701516104019190611871565b83602001818152505061041c8660c001518760200151611887565b83604001818152505061043786604001518760e0015161189d565b8360600181815250506104528660c0015187606001516118b3565b83608001818152505061046d86608001518760e001516118c9565b8360a00181815250506104888660c001518760a001516118df565b60c0840152600061049884610ead565b60005490915060ff161515811515146104f35760405162461bcd60e51b815260206004820152601660248201527f6765546573743a2063617374203634206661696c65640000000000000000000060448201526064016102f2565b6105046102338b89602001516118f5565b60005460ff161515901515148015610535575061052861023388600001518b611947565b60005460ff161515901515145b6105905760405162461bcd60e51b815260206004820152602660248201527f6765546573743a2074657374203820626974732077697468207363616c61722060448201526519985a5b195960d21b60648201526084016102f2565b6105a46102338b60ff16896060015161199a565b60005460ff1615159015151480156105d857506105cb61023388604001518b60ff166119ee565b60005460ff161515901515145b6106345760405162461bcd60e51b815260206004820152602760248201527f6765546573743a207465737420313620626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016102f2565b6106486102338b60ff168960a00151611a41565b60005460ff16151590151514801561067c575061066f61023388608001518b60ff16611a97565b60005460ff161515901515145b6106d85760405162461bcd60e51b815260206004820152602760248201527f6765546573743a207465737420333220626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016102f2565b6106ec6102338b60ff168960e00151611aed565b60005460ff16151590151514801561072057506107136102338860c001518b60ff16611b47565b60005460ff161515901515145b61077c5760405162461bcd60e51b815260206004820152602760248201527f6765546573743a207465737420363420626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016102f2565b505060005460ff1698975050505050505050565b6000806107a0836000015161171d565b90506107af836020015161171d565b15158115151480156107d057506107c9836040015161171d565b1515811515145b6108685760405162461bcd60e51b815260206004820152604660248201527f64656372797074416e64436f6d70617265416c6c526573756c74733a2046616960448201527f6c656420746f206465637279707420616e6420636f6d7061726520616c6c207260648201527f6573756c74730000000000000000000000000000000000000000000000000000608482015260a4016102f2565b92915050565b60006108b860405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6108dc60405180606001604052806000815260200160008152602001600081525090565b61090e6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b61094e6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610959848888611600565b61096e61023385600001518660200151611ba1565b6000805460ff1916911515919091179055604084015160608501516109939190611bb6565b8352835160608501516109a69190611bcb565b8360200181815250506109c184604001518560200151611be1565b604084015260006109d184610790565b60005490915060ff16151581151514610a2c5760405162461bcd60e51b815260206004820152601660248201527f6571546573743a2063617374203136206661696c65640000000000000000000060448201526064016102f2565b610a3e85608001518660a00151611bf7565b8352845160a0860151610a519190611c0c565b836020018181525050610a6c85608001518660200151611c22565b836040018181525050610a8785604001518660a00151611c38565b836060018181525050610aa285608001518660600151611c4e565b60808401526000610ab284610f52565b60005490915060ff16151581151514610b0d5760405162461bcd60e51b815260206004820152601660248201527f6571546573743a2063617374203332206661696c65640000000000000000000060448201526064016102f2565b610b1f8660c001518760e00151611c64565b8352855160e0870151610b329190611c79565b836020018181525050610b4d8660c001518760200151611c8f565b836040018181525050610b6886604001518760e00151611ca5565b836060018181525050610b838660c001518760600151611cbb565b836080018181525050610b9e86608001518760e00151611cd1565b8360a0018181525050610bb98660c001518760a00151611ce7565b60c08401526000610bc984610ead565b60005490915060ff16151581151514610c245760405162461bcd60e51b815260206004820152601660248201527f6571546573743a2063617374203634206661696c65640000000000000000000060448201526064016102f2565b610c356102338b8960200151611cfd565b60005460ff161515901515148015610c665750610c5961023388600001518b611d12565b60005460ff161515901515145b610cc15760405162461bcd60e51b815260206004820152602660248201527f6571546573743a2074657374203820626974732077697468207363616c61722060448201526519985a5b195960d21b60648201526084016102f2565b610cd56102338b60ff168960600151611d28565b60005460ff161515901515148015610d095750610cfc61023388604001518b60ff16611d3e565b60005460ff161515901515145b610d655760405162461bcd60e51b815260206004820152602760248201527f6571546573743a207465737420313620626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016102f2565b610d796102338b60ff168960a00151611d53565b60005460ff161515901515148015610dad5750610da061023388608001518b60ff16611d69565b60005460ff161515901515145b610e095760405162461bcd60e51b815260206004820152602760248201527f6571546573743a207465737420333220626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016102f2565b610e1d6102338b60ff168960e00151611d7f565b60005460ff161515901515148015610e515750610e446102338860c001518b60ff16611d95565b60005460ff161515901515145b61077c5760405162461bcd60e51b815260206004820152602760248201527f6571546573743a207465737420363420626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016102f2565b600080610ebd836000015161171d565b9050610ecc836020015161171d565b1515811515148015610eed5750610ee6836040015161171d565b1515811515145b8015610f085750610f01836080015161171d565b1515811515145b8015610f235750610f1c836060015161171d565b1515811515145b8015610f3e5750610f378360c0015161171d565b1515811515145b80156107d057506107c98360a0015161171d565b600080610f62836000015161171d565b9050610f71836020015161171d565b1515811515148015610f925750610f8b836040015161171d565b1515811515145b8015610fad5750610fa6836080015161171d565b1515811515145b80156107d057506107c9836060015161171d565b600061100b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61102f60405180606001604052806000815260200160008152602001600081525090565b6110616040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6110a16040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6110ac848888611600565b6110c161023385600001518660200151611dab565b6000805460ff1916911515919091179055604084015160608501516110e69190611dc0565b8352835160608501516110f99190611dd5565b83602001818152505061111484604001518560200151611deb565b6040840152600061112484610790565b60005490915060ff1615158115151461117f5760405162461bcd60e51b815260206004820152601660248201527f6e65546573743a2063617374203136206661696c65640000000000000000000060448201526064016102f2565b61119185608001518660a00151611e01565b8352845160a08601516111a49190611e16565b8360200181815250506111bf85608001518660200151611e2c565b8360400181815250506111da85604001518660a00151611e42565b8360600181815250506111f585608001518660600151611e58565b6080840152600061120584610f52565b60005490915060ff161515811515146112605760405162461bcd60e51b815260206004820152601660248201527f6e65546573743a2063617374203332206661696c65640000000000000000000060448201526064016102f2565b6112728660c001518760e00151611e6e565b8352855160e08701516112859190611e83565b8360200181815250506112a08660c001518760200151611e99565b8360400181815250506112bb86604001518760e00151611eaf565b8360600181815250506112d68660c001518760600151611ec5565b8360800181815250506112f186608001518760e00151611edb565b8360a001818152505061130c8660c001518760a00151611ef1565b60c0840152600061131c84610ead565b60005490915060ff161515811515146113775760405162461bcd60e51b815260206004820152601660248201527f6e65546573743a2063617374203634206661696c65640000000000000000000060448201526064016102f2565b6113886102338b8960200151611f07565b60005460ff1615159015151480156113b957506113ac61023388600001518b611f1c565b60005460ff161515901515145b6114145760405162461bcd60e51b815260206004820152602660248201527f6e65546573743a2074657374203820626974732077697468207363616c61722060448201526519985a5b195960d21b60648201526084016102f2565b6114286102338b60ff168960600151611f32565b60005460ff16151590151514801561145c575061144f61023388604001518b60ff16611f48565b60005460ff161515901515145b6114b85760405162461bcd60e51b815260206004820152602760248201527f6e65546573743a207465737420313620626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016102f2565b6114cc6102338b60ff168960a00151611f5d565b60005460ff16151590151514801561150057506114f361023388608001518b60ff16611f73565b60005460ff161515901515145b61155c5760405162461bcd60e51b815260206004820152602760248201527f6e65546573743a207465737420333220626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016102f2565b6115706102338b60ff168960e00151611f89565b60005460ff1615159015151480156115a457506115976102338860c001518b60ff16611f9f565b60005460ff161515901515145b61077c5760405162461bcd60e51b815260206004820152602760248201527f6e65546573743a207465737420363420626974732077697468207363616c61726044820152660819985a5b195960ca1b60648201526084016102f2565b61160982611fb5565b835261161481611fb5565b602084015261162560ff8316612044565b604084015261163660ff8216612044565b606084015261164760ff8316612095565b608084015261165860ff8216612095565b60a084015261166960ff83166120e8565b60c084015261167a60ff82166120e8565b60e0909301929092525050565b6000606463813b207461169c6001808561213f565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015260248101869052604481018590526064015b6020604051808303816000875af11580156116f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611716919061243a565b9392505050565b6040517f0cfed56100000000000000000000000000000000000000000000000000000000815260006004820181905260248201839052908190606490630cfed561906044016020604051808303816000875af1158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a5919061243a565b15159392505050565b6000606463813b207461169c6002808561213f565b6000606463813b207461169c600160028561213f565b6000606463813b207461169c600260018561213f565b6000606463813b207461169c6003808561213f565b6000606463813b207461169c600160038561213f565b6000606463813b207461169c600360018561213f565b6000606463813b207461169c600260038561213f565b6000606463813b207461169c600360028561213f565b6000606463813b207461169c6004808561213f565b6000606463813b207461169c600160048561213f565b6000606463813b207461169c600460018561213f565b6000606463813b207461169c600260048561213f565b6000606463813b207461169c600460028561213f565b6000606463813b207461169c600360048561213f565b6000606463813b207461169c600460038561213f565b6000606463813b207461190a6001808061213f565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015260ff86166024820152604481018590526064016116d3565b6000606463813b207461195d600180600261213f565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905260ff851660448201526064016116d3565b6000606463813b20746119b0600280600161213f565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015261ffff86166024820152604481018590526064016116d3565b6000606463813b2074611a036002808061213f565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905261ffff851660448201526064016116d3565b6000606463813b2074611a57600380600161213f565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015263ffffffff86166024820152604481018590526064016116d3565b6000606463813b2074611aad600380600261213f565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905263ffffffff851660448201526064016116d3565b6000606463813b2074611b03600480600161213f565b6040516001600160e01b031960e084901b1681526001600160e81b0319909116600482015267ffffffffffffffff86166024820152604481018590526064016116d3565b6000606463813b2074611b5d600480600261213f565b6040516001600160e01b031960e084901b1681526001600160e81b031990911660048201526024810186905267ffffffffffffffff851660448201526064016116d3565b60006064637c12a1eb61169c6001808561213f565b60006064637c12a1eb61169c6002808561213f565b60006064637c12a1eb61169c600160028561213f565b60006064637c12a1eb61169c600260018561213f565b60006064637c12a1eb61169c6003808561213f565b60006064637c12a1eb61169c600160038561213f565b60006064637c12a1eb61169c600360018561213f565b60006064637c12a1eb61169c600260038561213f565b60006064637c12a1eb61169c600360028561213f565b60006064637c12a1eb61169c6004808561213f565b60006064637c12a1eb61169c600160048561213f565b60006064637c12a1eb61169c600460018561213f565b60006064637c12a1eb61169c600260048561213f565b60006064637c12a1eb61169c600460028561213f565b60006064637c12a1eb61169c600360048561213f565b60006064637c12a1eb61169c600460038561213f565b60006064637c12a1eb61190a6001808061213f565b60006064637c12a1eb61195d600180600261213f565b60006064637c12a1eb6119b0600280600161213f565b60006064637c12a1eb611a036002808061213f565b60006064637c12a1eb611a57600380600161213f565b60006064637c12a1eb611aad600380600261213f565b60006064637c12a1eb611b03600480600161213f565b60006064637c12a1eb611b5d600480600261213f565b600060646342094c5661169c6001808561213f565b600060646342094c5661169c6002808561213f565b600060646342094c5661169c600160028561213f565b600060646342094c5661169c600260018561213f565b600060646342094c5661169c6003808561213f565b600060646342094c5661169c600160038561213f565b600060646342094c5661169c600360018561213f565b600060646342094c5661169c600260038561213f565b600060646342094c5661169c600360028561213f565b600060646342094c5661169c6004808561213f565b600060646342094c5661169c600160048561213f565b600060646342094c5661169c600460018561213f565b600060646342094c5661169c600260048561213f565b600060646342094c5661169c600460028561213f565b600060646342094c5661169c600360048561213f565b600060646342094c5661169c600460038561213f565b600060646342094c5661190a6001808061213f565b600060646342094c5661195d600180600261213f565b600060646342094c566119b0600280600161213f565b600060646342094c56611a036002808061213f565b600060646342094c56611a57600380600161213f565b600060646342094c56611aad600380600261213f565b600060646342094c56611b03600480600161213f565b600060646342094c56611b5d600480600261213f565b6040516306cdb05b60e51b81527f0100000000000000000000000000000000000000000000000000000000000000600482015260ff8216602482015260009060649063d9b60b60906044015b6020604051808303816000875af1158015612020573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610868919061243a565b6040516306cdb05b60e51b81527f0200000000000000000000000000000000000000000000000000000000000000600482015261ffff8216602482015260009060649063d9b60b6090604401612001565b6040516306cdb05b60e51b81527f0300000000000000000000000000000000000000000000000000000000000000600482015263ffffffff8216602482015260009060649063d9b60b6090604401612001565b6040516306cdb05b60e51b81527f0400000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff8216602482015260009060649063d9b60b6090604401612001565b600081600281111561215357612153612453565b60ff16600884600481111561216a5761216a612453565b61ffff16901b61ffff16601086600481111561218857612188612453565b62ffffff16901b171760e81b949350505050565b803560ff811681146121ad57600080fd5b919050565b600080604083850312156121c557600080fd5b6121ce8361219c565b91506121dc6020840161219c565b90509250929050565b604051610100810167ffffffffffffffff8111828210171561221757634e487b7160e01b600052604160045260246000fd5b60405290565b60006060828403121561222f57600080fd5b6040516060810181811067ffffffffffffffff8211171561226057634e487b7160e01b600052604160045260246000fd5b80604052508235815260208301356020820152604083013560408201528091505092915050565b600060e0828403121561229957600080fd5b60405160e0810181811067ffffffffffffffff821117156122ca57634e487b7160e01b600052604160045260246000fd5b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528091505092915050565b600060a0828403121561232b57600080fd5b60405160a0810181811067ffffffffffffffff8211171561235c57634e487b7160e01b600052604160045260246000fd5b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b60008060008385036101408112156123ae57600080fd5b610100808212156123be57600080fd5b6123c66121e5565b9150853582526020860135602083015260408601356040830152606086013560608301526080860135608083015260a086013560a083015260c086013560c083015260e086013560e083015281945061242081870161219c565b93505050612431610120850161219c565b90509250925092565b60006020828403121561244c57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122022c604f5f187205a42aaab79a37d588f5020b6b2851ea82db8c56e45ebc29cf364736f6c63430008140033";

type Comparison2TestsContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Comparison2TestsContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Comparison2TestsContract__factory extends ContractFactory {
  constructor(...args: Comparison2TestsContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Comparison2TestsContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): Comparison2TestsContract__factory {
    return super.connect(runner) as Comparison2TestsContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Comparison2TestsContractInterface {
    return new Interface(_abi) as Comparison2TestsContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Comparison2TestsContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as Comparison2TestsContract;
  }
}
