/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  OffboardToUserKeyTestContract,
  OffboardToUserKeyTestContractInterface,
} from "../../../../contracts/precompiles/OffboardToUserKeyTestsContract.sol/OffboardToUserKeyTestContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "userKey",
        type: "bytes",
      },
    ],
    name: "AccountOnboarded",
    type: "event",
  },
  {
    inputs: [],
    name: "getCTs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCt",
    outputs: [
      {
        internalType: "ctUint8",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUserKey",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "signedEK",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getUserKeyTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getX",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "offboardToUserTest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "signedEK",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "userKeyTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e55806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635197c7aa1161005b5780635197c7aa146100da5780635cbfeea2146100f3578063fbe5fe1c14610108578063fbffef771461011b57600080fd5b80630844066e1461008257806320ee9bfb146100985780633e99ee8c146100ad575b600080fd5b6002546040519081526020015b60405180910390f35b6100ab6100a636600461098d565b61012e565b005b6003546004546005546006545b60408051948552602085019390935291830152606082015260800161008f565b60015460ff165b60405160ff909116815260200161008f565b6100fb610193565b60405161008f9190610a49565b6100e1610116366004610a85565b610225565b6100ba610129366004610b06565b6102cc565b600061013c8585858561036f565b90503373ffffffffffffffffffffffffffffffffffffffff167fb67504ecfeef0230a06f661ea388c2947b4125a35e918ebff5889e3553c29c04826040516101849190610a49565b60405180910390a25050505050565b6060600080546101a290610b41565b80601f01602080910402602001604051908101604052809291908181526020018280546101ce90610b41565b801561021b5780601f106101f05761010080835404028352916020019161021b565b820191906000526020600020905b8154815290600101906020018083116101fe57829003601f168201915b5050505050905090565b600080610232600561056b565b90506000610241826005610600565b905061024f8888888861036f565b60009061025c9082610be0565b5061026781856106c9565b600255600061027582610742565b905060006102828261079c565b905061028d816107ac565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff9290921691821790559a9950505050505050505050565b60008060008060006102dd8761056b565b905060006102ed8860ff166107bc565b905060006102fd8960ff1661080d565b9050600061030d8a60ff16610860565b9050600061031b858b6106c9565b90506000610329858c6108b7565b90506000610337858d6108c7565b90506000610345858e6108d7565b6003859055600484905560058390556006819055939e929d50909b50919950975050505050505050565b6060600061037d8584610cb6565b67ffffffffffffffff81111561039557610395610b7b565b6040519080825280601f01601f1916602001820160405280156103bf576020820181803683370190505b50905060005b8381101561043c578484828181106103df576103df610cc9565b9050013560f81c60f81b8282815181106103fb576103fb610cc9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061043481610cdf565b9150506103c5565b5060005b858110156104de5786868281811061045a5761045a610cc9565b909101357fff000000000000000000000000000000000000000000000000000000000000001690508261048d8387610cb6565b8151811061049d5761049d610cc9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806104d681610cdf565b915050610440565b506040517fa85f0ca200000000000000000000000000000000000000000000000000000000815260649063a85f0ca29061051c908490600401610a49565b600060405180830381865afa158015610539573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105619190810190610cf9565b9695505050505050565b6040516306cdb05b60e51b81527f0100000000000000000000000000000000000000000000000000000000000000600482015260ff8216602482015260009060649063d9b60b60906044015b6020604051808303816000875af11580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa9190610dbc565b92915050565b60006064638c5d015061061660018060026108e7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681527fffffff000000000000000000000000000000000000000000000000000000000090911660048201526024810186905260ff851660448201526064015b6020604051808303816000875af115801561069e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c29190610dbc565b9392505050565b60006064633c6f0e6860015b60f81b8585604051602001610715919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161067f93929190610dd5565b6000606463c50c9c0260015b60f81b846040518363ffffffff1660e01b81526004016105b79291907fff00000000000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b6000606463d2c135e5600161074e565b60006064630cfed561600161074e565b6040516306cdb05b60e51b81527f0200000000000000000000000000000000000000000000000000000000000000600482015261ffff8216602482015260009060649063d9b60b60906044016105b7565b6040516306cdb05b60e51b81527f0300000000000000000000000000000000000000000000000000000000000000600482015263ffffffff8216602482015260009060649063d9b60b60906044016105b7565b6040516306cdb05b60e51b81527f0400000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff8216602482015260009060649063d9b60b60906044016105b7565b60006064633c6f0e6860026106d5565b60006064633c6f0e6860036106d5565b60006064633c6f0e6860046106d5565b60008160028111156108fb576108fb610da6565b60ff16600884600481111561091257610912610da6565b61ffff16901b61ffff16601086600481111561093057610930610da6565b62ffffff16901b171760e81b949350505050565b60008083601f84011261095657600080fd5b50813567ffffffffffffffff81111561096e57600080fd5b60208301915083602082850101111561098657600080fd5b9250929050565b600080600080604085870312156109a357600080fd5b843567ffffffffffffffff808211156109bb57600080fd5b6109c788838901610944565b909650945060208701359150808211156109e057600080fd5b506109ed87828801610944565b95989497509550505050565b60005b83811015610a145781810151838201526020016109fc565b50506000910152565b60008151808452610a358160208601602086016109f9565b601f01601f19169290920160200192915050565b6020815260006106c26020830184610a1d565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a8057600080fd5b919050565b600080600080600060608688031215610a9d57600080fd5b853567ffffffffffffffff80821115610ab557600080fd5b610ac189838a01610944565b90975095506020880135915080821115610ada57600080fd5b50610ae788828901610944565b9094509250610afa905060408701610a5c565b90509295509295909350565b60008060408385031215610b1957600080fd5b823560ff81168114610b2a57600080fd5b9150610b3860208401610a5c565b90509250929050565b600181811c90821680610b5557607f821691505b602082108103610b7557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f821115610bdb57600081815260208120601f850160051c81016020861015610bb85750805b601f850160051c820191505b81811015610bd757828155600101610bc4565b5050505b505050565b815167ffffffffffffffff811115610bfa57610bfa610b7b565b610c0e81610c088454610b41565b84610b91565b602080601f831160018114610c435760008415610c2b5750858301515b600019600386901b1c1916600185901b178555610bd7565b600085815260208120601f198616915b82811015610c7257888601518255948401946001909101908401610c53565b5085821015610c905787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b808201808211156105fa576105fa610ca0565b634e487b7160e01b600052603260045260246000fd5b60006000198203610cf257610cf2610ca0565b5060010190565b600060208284031215610d0b57600080fd5b815167ffffffffffffffff80821115610d2357600080fd5b818401915084601f830112610d3757600080fd5b815181811115610d4957610d49610b7b565b604051601f8201601f19908116603f01168101908382118183101715610d7157610d71610b7b565b81604052828152876020848701011115610d8a57600080fd5b610d9b8360208301602088016109f9565b979650505050505050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215610dce57600080fd5b5051919050565b7fff0000000000000000000000000000000000000000000000000000000000000084168152826020820152606060408201526000610e166060830184610a1d565b9594505050505056fea2646970667358221220e8ace7c88063584a5e9b63dc61e0ef2a0c41c3e76f9064a41fec9a8ad9bce34864736f6c63430008140033";

type OffboardToUserKeyTestContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OffboardToUserKeyTestContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OffboardToUserKeyTestContract__factory extends ContractFactory {
  constructor(...args: OffboardToUserKeyTestContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OffboardToUserKeyTestContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): OffboardToUserKeyTestContract__factory {
    return super.connect(runner) as OffboardToUserKeyTestContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OffboardToUserKeyTestContractInterface {
    return new Interface(_abi) as OffboardToUserKeyTestContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): OffboardToUserKeyTestContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as OffboardToUserKeyTestContract;
  }
}
